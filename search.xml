<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于hexo</title>
    <url>/2021/09/29/%E5%85%B3%E4%BA%8Ehexo/</url>
    <content><![CDATA[<h1 id="1-Hexo简介"><a href="#1-Hexo简介" class="headerlink" title="1.Hexo简介"></a>1.Hexo简介</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p>
<h1 id="2-Hexo搭建步骤"><a href="#2-Hexo搭建步骤" class="headerlink" title="2.Hexo搭建步骤"></a>2.Hexo搭建步骤</h1><p>安装Git<br>安装Node.js<br>安装Hexo<br>GitHub创建个人仓库<br>生成SSH添加到GitHub<br>将hexo部署到GitHub<br>设置个人域名<br>发布文章</p>
<h2 id="2-1安装Git"><a href="#2-1安装Git" class="headerlink" title="2.1安装Git"></a>2.1安装Git</h2><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。</p>
<p>windows：到git官网上下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p>
<p>linux：sudo apt-get install git<br>安装好后，用git –version 来查看一下版本</p>
<h2 id="2-2安装nodejs"><a href="#2-2安装nodejs" class="headerlink" title="2.2安装nodejs"></a>2.2安装nodejs</h2><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p>
<p>windows：nodejs选择LTS版本就行了。</p>
<p>linux：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure>


<p>安装完后，打开命令行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>


<p>检查一下有没有安装成功</p>
<h2 id="2-3安装hexo"><a href="#2-3安装hexo" class="headerlink" title="2.3安装hexo"></a>2.3安装hexo</h2><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p>
<p>输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>


<p>依旧用hexo -v查看一下版本</p>
<p>至此就全部安装完了。</p>
<p>接下来初始化一下hexo</p>
<p>hexo init myblog<br>这个myblog可以自己取什么名字都行，然后</p>
<p>cd myblog //进入这个myblog文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>


<p>新建完成后，指定文件夹目录下有：</p>
<p>node_modules: 依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章<br>themes：主题<br>** _config.yml: 博客的配置文件**<br>hexo g<br>hexo server<br>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p>
<p>使用ctrl+c可以把服务关掉。</p>
<h2 id="2-4GitHub创建个人仓库"><a href="#2-4GitHub创建个人仓库" class="headerlink" title="2.4GitHub创建个人仓库"></a>2.4GitHub创建个人仓库</h2><p>首先，你先要有一个GitHub账户，去注册一个吧。</p>
<p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p>
<p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。</p>
<p>点击create repository。</p>
<h2 id="2-5生成SSH添加到GitHub"><a href="#2-5生成SSH添加到GitHub" class="headerlink" title="2.5生成SSH添加到GitHub"></a>2.5生成SSH添加到GitHub</h2><p>回到你的git bash中，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>

<p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p>
<p>可以用以下两条，检查一下你有没有输对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>

<p>然后创建SSH,一路回车</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>

<p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p>
<p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p>
<p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p>
<p>在gitbash中，查看是否成功</p>
<p>ssh -T <a href="mailto:&#x67;&#105;&#116;&#64;&#x67;&#105;&#116;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;">&#x67;&#105;&#116;&#64;&#x67;&#105;&#116;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;</a></p>
<h2 id="2-6将hexo部署到GitHub"><a href="#2-6将hexo部署到GitHub" class="headerlink" title="2.6将hexo部署到GitHub"></a>2.6将hexo部署到GitHub</h2><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/xxx/xxx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean //清除了你之前生成的东西，也可以不加</span><br><span class="line">hexo generate //生成静态文章，可以用 hexo g缩写</span><br><span class="line">hexo deploy //部署文章，可以用hexo d缩写</span><br></pre></td></tr></table></figure>

<p>注意deploy时可能要你输入username和password。</p>
<p>得到下图就说明部署成功了，过一会儿就可以在<a href="http://xxxx.github.io/">http://xxxx.github.io</a> 这个网站看到你的博客了！！</p>
<h2 id="2-7设置个人域名"><a href="#2-7设置个人域名" class="headerlink" title="2.7设置个人域名"></a>2.7设置个人域名</h2><p>现在你的个人网站的地址是xxxx.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。</p>
<p>注册一个阿里云账户,在阿里云上买一个域名.</p>
<p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p>
<p>点解析进去，添加解析。</p>
<p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p>
<p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p>
<p>最后，在gitbash中，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p>
<p>接下来你就可以正式开始写文章了。</p>
<p>hexo使用详情见<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Stack与Deque</title>
    <url>/2022/01/22/Stack%E4%B8%8EDeque/</url>
    <content><![CDATA[<h1 id="Java-Stack类"><a href="#Java-Stack类" class="headerlink" title="Java Stack类"></a>Java Stack类</h1><p>是Vector的一个子类，它栈实现了一个标准的后进先出的栈。</p>
<p>除了定义了向量定义的所有方法，也定义了自己的一些方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span><span class="comment">//判断堆栈是否为空</span></span></span><br><span class="line"><span class="function">Object <span class="title">peek</span><span class="params">()</span><span class="comment">//查看堆栈顶部的对象，但不从堆栈中移除它</span></span></span><br><span class="line"><span class="function">Object <span class="title">pop</span><span class="params">()</span><span class="comment">//移除堆栈顶部的对象，并作为此函数的值返回该对象</span></span></span><br><span class="line"><span class="function">Object <span class="title">push</span><span class="params">(Object element)</span><span class="comment">//把该对象压入堆栈顶部</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(Object element)</span><span class="comment">//返回对象在堆栈中的位置，以1为基数</span></span></span><br></pre></td></tr></table></figure>

<h1 id="Java-Deque类"><a href="#Java-Deque类" class="headerlink" title="Java Deque类"></a>Java Deque类</h1><p><a href="https://so.csdn.net/so/search?q=Deque&spm=1001.2101.3001.7020">Deque</a>是一个双端队列接口，继承自Queue接口，Deque的实现类是LinkedList、ArrayDeque、LinkedBlockingDeque，其中LinkedList是最常用的。</p>
<p>Deque有三种用途：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通队列(一端进另一端出):</span></span><br><span class="line">Queue queue = <span class="keyword">new</span> LinkedList()或Deque deque = <span class="keyword">new</span> LinkedList()</span><br><span class="line"><span class="comment">//双端队列(两端都可进出)</span></span><br><span class="line">Deque deque = <span class="keyword">new</span> LinkedList()</span><br><span class="line"><span class="comment">//堆栈</span></span><br><span class="line">Deque deque = <span class="keyword">new</span> LinkedList()</span><br><span class="line"><span class="comment">//把Deque当栈用的时候：</span></span><br><span class="line">push(E e)<span class="comment">//入栈</span></span><br><span class="line">poll() <span class="comment">//出栈,pop() 后者在栈空的时候会抛出异常，前者返回null</span></span><br><span class="line">peek() <span class="comment">//查看栈顶,为空时返回null</span></span><br><span class="line"><span class="comment">//把Deque当队列用的时候：</span></span><br><span class="line">offer(E e)<span class="comment">//入队	</span></span><br><span class="line">poll() <span class="comment">//出队,为空时返回null</span></span><br><span class="line">peek() <span class="comment">//查看队首,为空时返回null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从上面(头部)插入：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的前面 ，空间不足抛异常</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的前面 ，空间不足插入失败返回回false</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的前面 ，空间不足抛异常</span></span></span><br><span class="line"><span class="function"><span class="comment">//从上面(头部)出来:</span></span></span><br><span class="line"><span class="function">E <span class="title">removeFirst</span><span class="params">()</span>	<span class="comment">//检索并删除第一个元素，为空时抛出异常</span></span></span><br><span class="line"><span class="function">E <span class="title">remove</span><span class="params">()</span>	<span class="comment">//和removeFirst一样 检索并删除第一个元素，为空时抛出异常</span></span></span><br><span class="line"><span class="function">E <span class="title">pop</span><span class="params">()</span>	<span class="comment">//和removeFirst一样 检索并删除第一个元素，为空时抛出异常</span></span></span><br><span class="line"><span class="function">E <span class="title">pollFirst</span><span class="params">()</span>	<span class="comment">//检索并删除第一个元素 ，为空时返回null</span></span></span><br><span class="line"><span class="function">E <span class="title">poll</span><span class="params">()</span>	<span class="comment">//和pollFirst一样 检索并删除第一个元素 ，为空时返回null</span></span></span><br><span class="line"><span class="function">E <span class="title">getFirst</span><span class="params">()</span>	<span class="comment">//只看看第一个元素 ，不出来，为空就抛异常</span></span></span><br><span class="line"><span class="function">E <span class="title">element</span><span class="params">()</span>	<span class="comment">//和getFirst一样 只看看第一个元素 ，不出来，为空就抛异常</span></span></span><br><span class="line"><span class="function">E <span class="title">peekFirst</span><span class="params">()</span>	<span class="comment">//只看看第一个元素 ，不出来，为空时返回null</span></span></span><br><span class="line"><span class="function">E <span class="title">peek</span><span class="params">()</span>	<span class="comment">//和peekFirst一样 只看看第一个元素 ，不出来，为空时返回null</span></span></span><br><span class="line"><span class="function"><span class="comment">//从下面(尾部)插入：</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的后面 ，空间不足抛异常</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的后面，空间不足返回false</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的后面，空间不足抛异常</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的后面，空间不足返回false</span></span></span><br><span class="line"><span class="function"><span class="comment">//从下面(尾部)出来:</span></span></span><br><span class="line"><span class="function">E <span class="title">removeLast</span><span class="params">()</span>	<span class="comment">//检索并删除最后一个元素，为空时抛出异常</span></span></span><br><span class="line"><span class="function">E <span class="title">pollLast</span><span class="params">()</span>	<span class="comment">//检索并删除最后一个元素 ，为空时返回null</span></span></span><br><span class="line"><span class="function">E <span class="title">getLast</span><span class="params">()</span>	<span class="comment">//只看看最后一个元素 ，不出来，为空就抛异常</span></span></span><br><span class="line"><span class="function">E <span class="title">peekLast</span><span class="params">()</span>	<span class="comment">//只看看最后一个元素 ，不出来，为空时返回null</span></span></span><br></pre></td></tr></table></figure>

<h1 id="经典算法题"><a href="#经典算法题" class="headerlink" title="经典算法题"></a>经典算法题</h1><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p>
<p>示例 1：</p>
<p>输入：s = “()”<br>输出：true<br>示例 2：</p>
<p>输入：s = “()[]{}”<br>输出：true<br>示例 3：</p>
<p>输入：s = “(]”<br>输出：false</p>
<p>来源：力扣（LeetCode）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&#x27;(&#x27;</span> == c)&#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;&#123;&#x27;</span> == c)&#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;[&#x27;</span> == c)&#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.isEmpty() || c != stack.peek())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：Java堆栈[Stack类]已经过时，Java官方推荐使用Deque替代Stack使用。Deque堆栈操作方法：push()、pop()、peek()。</strong></p>
]]></content>
      <categories>
        <category>栈堆</category>
      </categories>
      <tags>
        <tag>栈堆</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack</title>
    <url>/2022/01/28/webpack/</url>
    <content><![CDATA[<h1 id="使用WebPack"><a href="#使用WebPack" class="headerlink" title="使用WebPack"></a>使用WebPack</h1><p>1.创建项目</p>
<p>2.创建一个名为modules的目录，用于放置js模块等资源文件</p>
<p>3.在modules下创建模块文件，如hello.js，用于编写js模块相关代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 暴露一个方法sayHi</span></span><br><span class="line"><span class="built_in">exports</span>.sayHi=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;div&gt;hello webpack&lt;/div&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.在modules下创建一个名为main.js的入口文件，用于打包时设置entry属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//require导入一个模块，就可以调用这个模块中的方法了</span></span><br><span class="line"><span class="keyword">var</span> hello= <span class="built_in">require</span>(<span class="string">&quot;./hello&quot;</span>);</span><br><span class="line">hello.sayHi();</span><br></pre></td></tr></table></figure>

<p>5.在项目目录下创建webpack.config.js配置文件，使用webpack命令打包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./modules/main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;./js/bundle.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span> <span class="comment">//development开发环境 production生产环境变量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>6.在项目目录下创建index.html文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/js/bundle.js&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>7.在idea控制台中直接执行webpack；如果失败的话，就使用管理员权限运行即可！</p>
<p>8.运行Html文件看效果</p>
<p><strong>说明：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数 --watach用于监听变化</span></span><br><span class="line">webpack --watch</span><br></pre></td></tr></table></figure>

<p><strong>安装：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br><span class="line">npm install webpack -cli -g</span><br><span class="line"></span><br><span class="line">webpack -v //测试安装是否成功</span><br><span class="line">webpack -cli -v</span><br></pre></td></tr></table></figure>

<p><strong>配置</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">entry:入口文件，指定webpack用哪个文件作为文件的入口</span><br><span class="line"><span class="attr">output</span>:输出，指定webpack把处理完成的文件放置到指定路径</span><br><span class="line"><span class="attr">module</span>:模块，用于处理各种类型的文件</span><br><span class="line"><span class="attr">plugins</span>:插件，如：热更新、代码重用等</span><br><span class="line"><span class="attr">resolve</span>:设置路径指向</span><br><span class="line"><span class="attr">watch</span>:监听,用于设置文件改动后直接打包</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">	<span class="attr">entry</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">	<span class="attr">output</span>:&#123;</span><br><span class="line">		<span class="attr">path</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="attr">filename</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">module</span>:&#123;</span><br><span class="line">		<span class="attr">loaders</span>:[</span><br><span class="line">			&#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>, loader: <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">plugins</span>:&#123;&#125;,</span><br><span class="line">	<span class="attr">resolve</span>:&#123;&#125;,</span><br><span class="line">	<span class="attr">watch</span>:ture</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>面试经</title>
    <url>/2022/02/12/%E9%9D%A2%E8%AF%95%E7%BB%8F/</url>
    <content><![CDATA[<h1 id="Spring-Boot打成的jar与普通的jar有什么区别？"><a href="#Spring-Boot打成的jar与普通的jar有什么区别？" class="headerlink" title="Spring Boot打成的jar与普通的jar有什么区别？"></a>Spring Boot打成的jar与普通的jar有什么区别？</h1><p>Spring Boot的项目终止以jar包的形式进行打包，这种jar包可以通过可以通过命令（java -jar xxx.jar）来运行的，这种jar包不能被其他项目所依赖，即使被依赖了也不能直接使用其中的类。普通的jar包，解压后直接就是包名，包里就是我们的代码，而 Spring Boot 打包成的可执行 jar 解压后，在 \BOOT-INF\classes 目录下才是我们的代码，因此无法被直接引用。如果非要引用，可以在 pom.xml 文件中增加配置，将 Spring Boot 项目打包成两个 jar ，一个可执行，一个可引用。</p>
<h1 id="Spring-Boot如何定义多套不同的环境配置？"><a href="#Spring-Boot如何定义多套不同的环境配置？" class="headerlink" title="Spring Boot如何定义多套不同的环境配置？"></a>Spring Boot如何定义多套不同的环境配置？</h1><p>一个程序可能在不同的环境下运行，如开发环境(dev)、测试环境（test)、生成环境（prod）。</p>
<p>配置不同环境的配置文件：</p>
<ul>
<li>application.properties/yml</li>
<li>application-dev.properties/yml(开发环境)</li>
<li>application-test.properties/yml(测试环境)</li>
<li>application-uat.properties/yml(预发布环境)</li>
<li>application-prod.properties/yml(生产环境)</li>
</ul>
<p>指定环境运行：</p>
<ol>
<li>在cmd命令中指定：java -jar xxx.jar —spring.profiles.actvie=dev</li>
<li>在application.properties中指定:spring.profiles.actvie=dev</li>
<li>在idea编辑器中指定：在运行设置中Active profiles 输入 dev 即可。</li>
</ol>
<h1 id="什么是Spring-Data"><a href="#什么是Spring-Data" class="headerlink" title="什么是Spring Data?"></a>什么是Spring Data?</h1><p>Spring Data是一个用于简化数据库访问，并支持云服务的开源框架。其主要目标是使得对数据的访问变得方便快捷。</p>
<h1 id="Spring-Security和Shiro各自的优缺点？"><a href="#Spring-Security和Shiro各自的优缺点？" class="headerlink" title="Spring Security和Shiro各自的优缺点？"></a>Spring Security和Shiro各自的优缺点？</h1><p>相同点：</p>
<p>  1：认证功能</p>
<p>  2：授权功能</p>
<p>  3：加密功能</p>
<p>  4：会话管理</p>
<p>  5：缓存支持</p>
<p>  6：rememberMe功能…….</p>
<p>不同点：</p>
<p>   优点：</p>
<p>   1：Spring Security基于Spring开发，项目中如果使用Spring作为基础，配合Spring Security做权限更加方便，而Shiro需要和Spring进行整合开发</p>
<p>   2：Spring Security功能比Shiro更加丰富些，例如安全防护</p>
<p>   3：Spring Security社区资源比Shiro丰富</p>
<p>   缺点：</p>
<p>   1：Shiro的配置和使用比较简单，Spring Security上手复杂</p>
<p>   2：Shiro依赖性低，不需要任何框架和容器，可以独立运行，而Spring Security依赖于Spring容器</p>
<h1 id="SpringBoot实现热部署有哪几种方式"><a href="#SpringBoot实现热部署有哪几种方式" class="headerlink" title="SpringBoot实现热部署有哪几种方式?"></a>SpringBoot实现热部署有哪几种方式?</h1><ol>
<li><p>使用spring-boot-devtools组件（快速重新部署），在pom.xml文件中注入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用springloaded插件，在pom.xml文件中注入依赖</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="SpringBoot中如何解决跨域问题？"><a href="#SpringBoot中如何解决跨域问题？" class="headerlink" title="SpringBoot中如何解决跨域问题？"></a>SpringBoot中如何解决跨域问题？</h1><p>掌握SpringMVC中解决跨域问题的3种方式</p>
<ol>
<li>注解的方式：@CrossOrigin</li>
<li>全局配置的方式：WebMvcConfigurer接口的addCorsMappings方法中注册CORS配置</li>
<li>拦截器的方式：CorsFilter</li>
</ol>
<h1 id="SpringBoot有几种读取配置的方式？"><a href="#SpringBoot有几种读取配置的方式？" class="headerlink" title="SpringBoot有几种读取配置的方式？"></a>SpringBoot有几种读取配置的方式？</h1><p>@value</p>
<p>@ConfigurationProperties</p>
<h1 id="SpringBoot、SpringMVC和Spring有什么区别？"><a href="#SpringBoot、SpringMVC和Spring有什么区别？" class="headerlink" title="SpringBoot、SpringMVC和Spring有什么区别？"></a>SpringBoot、SpringMVC和Spring有什么区别？</h1><p>Spring 是一个“引擎”；</p>
<p>Spring MVC 是基于Spring的一个 MVC 框架 ；</p>
<p>Spring Boot 是基于Spring4的条件注册的一套快速开发整合包。</p>
<h1 id="什么是CSRF攻击？"><a href="#什么是CSRF攻击？" class="headerlink" title="什么是CSRF攻击？"></a>什么是CSRF攻击？</h1><p>跨站请求攻击。简单的说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己以前认证过的站点并运行一些操作。</p>
<h1 id="SpringBoot需要独立的容器运行吗？"><a href="#SpringBoot需要独立的容器运行吗？" class="headerlink" title="SpringBoot需要独立的容器运行吗？"></a>SpringBoot需要独立的容器运行吗？</h1><p>不需要。因为SpringBoot内置了tomcat、Jetty等服务器，可以独立运行。</p>
<h1 id="YAML配置的优势在哪里？"><a href="#YAML配置的优势在哪里？" class="headerlink" title="YAML配置的优势在哪里？"></a>YAML配置的优势在哪里？</h1><p>使用YMAL可以让文件更加结构化，而且不容易混淆。可以看出YAML具有分层配置数据。</p>
<p>使用原则：</p>
<p>1，大小写敏感</p>
<p>2，使用缩进表示层级关系</p>
<p>3，缩进长度没有限制，只要元素对齐就表示这些元素属于同一个层级</p>
<p>4，使用#号来表示注解</p>
<p>5，字符串可以不用引号标注</p>
<h1 id="如何使用SpringBoot实现分页和排序？"><a href="#如何使用SpringBoot实现分页和排序？" class="headerlink" title="如何使用SpringBoot实现分页和排序？"></a>如何使用SpringBoot实现分页和排序？</h1><p>使用 Spring Data-JPA 可以实现将可分页的传递给存储库方法。</p>
<h1 id="SpringBoot的核心注解是哪个？它主要有哪几个注解组成的？"><a href="#SpringBoot的核心注解是哪个？它主要有哪几个注解组成的？" class="headerlink" title="SpringBoot的核心注解是哪个？它主要有哪几个注解组成的？"></a>SpringBoot的核心注解是哪个？它主要有哪几个注解组成的？</h1><p>启动类上面的注解是@SpringBootApplication，它也是 Spring Boot 的核心注解，主要组合包含了以下 3 个注解：</p>
<p>@SpringBootConfiguration：组合了 @Configuration 注解，实现配置文件的功能。</p>
<p>@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项，如关闭数据源自动配置功能： @SpringBootApplication(exclude = { DataSourceAutoConfiguration.class })。</p>
<p>@ComponentScan：Spring组件扫描。</p>
<h1 id="SpringBoot集成mybatis的过程？"><a href="#SpringBoot集成mybatis的过程？" class="headerlink" title="SpringBoot集成mybatis的过程？"></a>SpringBoot集成mybatis的过程？</h1><ol>
<li>在pom.xml文件中注入相关的依赖。</li>
<li>在application.properties/yml中添加数据库配置和mapper扫描配置。</li>
</ol>
<h1 id="RequestMapping和GetMapping的不同之处在哪里？"><a href="#RequestMapping和GetMapping的不同之处在哪里？" class="headerlink" title="RequestMapping和GetMapping的不同之处在哪里？"></a>RequestMapping和GetMapping的不同之处在哪里？</h1><p>区别：<br>@GetMapping是一个组合注解，是@RequestMapping(method = RequestMethod.GET)的缩写。该注解将HTTP Get 映射到 特定的处理方法上。<br>同理@PostMapping也是一个组合注解，是@RequestMapping(method = RequestMethod.POST)的缩写。</p>
<p>注意：@RequestMapping如果没有指定请求方式，将接收Get、Post、Head、Options等所有的请求方式。</p>
<h1 id="SpringBoot中如何实现定时任务？"><a href="#SpringBoot中如何实现定时任务？" class="headerlink" title="SpringBoot中如何实现定时任务？"></a>SpringBoot中如何实现定时任务？</h1><ol>
<li>在启动类上添加 @EnableScheduling 注解，开启定时任务。在定时方法上加上@Scheduled注解。</li>
<li> 在启动类上添加 @EnableScheduling 注解，开启定时任务。注入Quartz 依赖。Quartz 在使用过程中，有两个关键概念，一个是JobDetail（要做的事情），另一个是触发器（什么时候做），要定义 JobDetail，需要先定义 Job，继承 QuartzJobBean 并实现默认的方法。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJob2</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line">    HelloService helloService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">getHelloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloService</span><span class="params">(HelloService helloService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloService = helloService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        helloService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello service &gt;&gt;&gt;&quot;</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Job 有了之后，接下来创建类，配置 JobDetail 和 Trigger 触发器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MethodInvokingJobDetailFactoryBean <span class="title">methodInvokingJobDetailFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MethodInvokingJobDetailFactoryBean bean = <span class="keyword">new</span> MethodInvokingJobDetailFactoryBean();</span><br><span class="line">        bean.setTargetBeanName(<span class="string">&quot;myJob1&quot;</span>);</span><br><span class="line">        bean.setTargetMethod(<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">JobDetailFactoryBean <span class="title">jobDetailFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JobDetailFactoryBean bean = <span class="keyword">new</span> JobDetailFactoryBean();</span><br><span class="line">        bean.setJobClass(MyJob2.class);</span><br><span class="line">        JobDataMap map = <span class="keyword">new</span> JobDataMap();</span><br><span class="line">        map.put(<span class="string">&quot;helloService&quot;</span>, helloService());</span><br><span class="line">        bean.setJobDataMap(map);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SimpleTriggerFactoryBean <span class="title">simpleTriggerFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleTriggerFactoryBean bean = <span class="keyword">new</span> SimpleTriggerFactoryBean();</span><br><span class="line">        bean.setStartTime(<span class="keyword">new</span> Date());</span><br><span class="line">        bean.setRepeatCount(<span class="number">5</span>);</span><br><span class="line">        bean.setJobDetail(methodInvokingJobDetailFactoryBean().getObject());</span><br><span class="line">        bean.setRepeatInterval(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">CronTriggerFactoryBean <span class="title">cronTrigger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CronTriggerFactoryBean bean = <span class="keyword">new</span> CronTriggerFactoryBean();</span><br><span class="line">        bean.setCronExpression(<span class="string">&quot;0/10 * * * * ?&quot;</span>);</span><br><span class="line">        bean.setJobDetail(jobDetailFactoryBean().getObject());</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SchedulerFactoryBean <span class="title">schedulerFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SchedulerFactoryBean bean = <span class="keyword">new</span> SchedulerFactoryBean();</span><br><span class="line">        bean.setTriggers(cronTrigger().getObject(), simpleTriggerFactoryBean().getObject());</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">HelloService <span class="title">helloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于这个配置说如下几点：</p>
<ol>
<li>JobDetail 的配置有两种方式：MethodInvokingJobDetailFactoryBean 和 JobDetailFactoryBean 。</li>
<li>使用 MethodInvokingJobDetailFactoryBean 可以配置目标 Bean 的名字和目标方法的名字，这种方式不支持传参。</li>
<li>使用 JobDetailFactoryBean 可以配置 JobDetail ，任务类继承自 QuartzJobBean ，这种方式支持传参，将参数封装在 JobDataMap 中进行传递。</li>
<li>Trigger 是指触发器，Quartz 中定义了多个触发器，这里向大家展示其中两种的用法，SimpleTrigger 和 CronTrigger 。</li>
<li>SimpleTrigger 有点类似于前面说的 @Scheduled 的基本用法。</li>
<li>CronTrigger 则有点类似于 @Scheduled 中 cron 表达式的用法。</li>
</ol>
<h1 id="SpringBoot的目录结构是怎样的？"><a href="#SpringBoot的目录结构是怎样的？" class="headerlink" title="SpringBoot的目录结构是怎样的？"></a>SpringBoot的目录结构是怎样的？</h1><p>　src/main/java:存放代码</p>
<p>　　src/main/resources</p>
<p>　　　　　　static:存放静态文件，比如：css js image </p>
<p>　　　　　　templates:存放静态页面 jsp ,html,tpl</p>
<p>　　　　　　application.properties文件，全局配置文件</p>
<h1 id="怎么实现拦截器？"><a href="#怎么实现拦截器？" class="headerlink" title="怎么实现拦截器？"></a>怎么实现拦截器？</h1><p>在Spring Boot项目中，拦截器经常被用来做登陆验证，日志记录等操作。拦截器是Spring提供的，所以可以将拦截器注成bean，由IOC容器来管理。实现拦截器的方式很简单，主要由以下两个步骤：<br>自定义拦截器类实现HandlerInterceptor接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拦截器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//登录之后，用户信息存入session</span></span><br><span class="line">        User user=(User) request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        String requestType = request.getHeader(<span class="string">&quot;X-Requested-With&quot;</span>);<span class="comment">//判断请求</span></span><br><span class="line">        <span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg2&quot;</span>,<span class="string">&quot;没有权限，请先登录&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/signin.html&quot;</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>自定义WebMvc配置类实现WebMvcConfigurer接口，添加自定义拦截器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LoginHandlerInterceptor <span class="title">loginHandlerInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginHandlerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123; 			          registry.addInterceptor(loginHandlerInterceptor()).addPathPatterns(<span class="string">&quot;/***.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Mybatis怎么遍历list集合"><a href="#Mybatis怎么遍历list集合" class="headerlink" title="Mybatis怎么遍历list集合?"></a>Mybatis怎么遍历list集合?</h1><p>用foreach标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;string&quot;</span>&gt;</span></span><br><span class="line">select uid from user where uid in</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">#&#123;item.uid,jdbcType=VARCHAR&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>相关解释：foreach的主要用在构建in 条件中，它可以在sql语句中迭代一个集合；</p>
<p>1.foreach元素的属性有item, index, collection, open, separator, close;</p>
<p>item—&gt;集合中每一个元素进行迭代的别名；</p>
<p>index—&gt;表示迭代过程中，每次迭代的位置，</p>
<p>open—&gt;该语句以什么开始；</p>
<p>separator—&gt;在每次进行迭代之间以什么符号作为分隔符；</p>
<p>close—&gt;以什么结束，</p>
<p>在使用foreach的时候最关键的也是容易出错的就是collection属性，</p>
<p>该属性是必须指定的，不同情况，属性值不同；</p>
<p>有一下3中情况：</p>
<p>① 如果传入的是单参数且参数类型是一个List的时候，collection属性值为list；</p>
<p>②如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array；</p>
<p>③如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了；</p>
<h1 id="Mybatis实现多对多？"><a href="#Mybatis实现多对多？" class="headerlink" title="Mybatis实现多对多？"></a>Mybatis实现多对多？</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;user_song&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.tx.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uId&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;nickname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;nickname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;headPortrait&quot;</span> <span class="attr">property</span>=<span class="string">&quot;headPortrait&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;leCoin&quot;</span> <span class="attr">property</span>=<span class="string">&quot;leCoin&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;customPlan&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customPlan&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;listeningTime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;listeningTime&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;song&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.util.List&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.tx.pojo.Song&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;mId&quot;</span> <span class="attr">property</span>=<span class="string">&quot;mId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;songTitle&quot;</span> <span class="attr">property</span>=<span class="string">&quot;songTitle&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;songUrl&quot;</span> <span class="attr">property</span>=<span class="string">&quot;songUrl&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;lyric&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lyric&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;singer&quot;</span> <span class="attr">property</span>=<span class="string">&quot;singer&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;duration&quot;</span> <span class="attr">property</span>=<span class="string">&quot;duration&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;albumName&quot;</span> <span class="attr">property</span>=<span class="string">&quot;albumName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;songImg&quot;</span> <span class="attr">property</span>=<span class="string">&quot;songImg&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;type&quot;</span> <span class="attr">property</span>=<span class="string">&quot;type&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;user_song&quot;</span>&gt;</span></span><br><span class="line">    SELECT u.*,m.* FROM t_user u,t_song m,user_song um WHERE u.uId=um.uId and m.mId=um.mId and u.userName=#&#123;userName&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>association和collection的区别是：</strong><br>association映射的是一个<a href="https://so.csdn.net/so/search?q=JavaBean&spm=1001.2101.3001.7020">JavaBean</a>类，它仅处理一对一的关联关系。<br>collection则是映射的一个集合列表，它处理的是一对多的关联关系。</p>
<h1 id="collection跟collections的区别"><a href="#collection跟collections的区别" class="headerlink" title="collection跟collections的区别"></a>collection跟collections的区别</h1><p>java.util.Collection 是一个 <strong>集合框架的父接口</strong>。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式。</p>
<p>java.util.Collections 是一个包装类。它包含有各种有关集合操作的 <strong>静态多态方法</strong>。此类 <strong>不能实例化</strong>，就像一 <strong>个工具类</strong>，服务于Java的Collection框架。 他提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。</p>
<h1 id="String类能被继承吗？"><a href="#String类能被继承吗？" class="headerlink" title="String类能被继承吗？"></a>String类能被继承吗？</h1><p>不能被继承,因为String类有final修饰符,而final修饰的类是不能被继承的。</p>
<h1 id="SSM框架前端页面保存在哪一个文件夹？"><a href="#SSM框架前端页面保存在哪一个文件夹？" class="headerlink" title="SSM框架前端页面保存在哪一个文件夹？"></a>SSM框架前端页面保存在哪一个文件夹？</h1><p>静态资源一般放置在webapp目录下</p>
<h1 id="AJax使用？"><a href="#AJax使用？" class="headerlink" title="AJax使用？"></a>AJax使用？</h1><p>ajax一个前后台配合的技术，它可以让javascript发送http请求，与后台通信，获取数据和信息。ajax技术的原理是实例化xmlhttp对象，使用此对象与后台通信。jquery将它封装成了一个函数$.ajax()，我们可以直接用这个函数来执行ajax请求。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery.ajax(...)</span><br><span class="line">      部分参数：</span><br><span class="line">            url：请求地址</span><br><span class="line">            type：请求方式，GET、POST（<span class="number">1.9</span><span class="number">.0</span>之后用method）</span><br><span class="line">        headers：请求头</span><br><span class="line">            data：要发送的数据</span><br><span class="line">    contentType：即将发送信息至服务器的内容编码类型(默认: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>)</span><br><span class="line">          <span class="keyword">async</span>：是否异步</span><br><span class="line">        timeout：设置请求超时时间（毫秒）</span><br><span class="line">      beforeSend：发送请求前执行的函数(全局)</span><br><span class="line">        complete：完成之后执行的回调函数(全局)</span><br><span class="line">        success：成功之后执行的回调函数(全局)</span><br><span class="line">          error：失败之后执行的回调函数(全局)</span><br><span class="line">        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型</span><br><span class="line">        dataType：将服务器端返回的数据转换成指定类型</span><br><span class="line">          <span class="string">&quot;xml&quot;</span>: 将服务器端返回的内容转换成xml格式</span><br><span class="line">          <span class="string">&quot;text&quot;</span>: 将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          <span class="string">&quot;html&quot;</span>: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。</span><br><span class="line">        <span class="string">&quot;script&quot;</span>: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          <span class="string">&quot;json&quot;</span>: 将服务器端返回的内容转换成相应的JavaScript对象</span><br><span class="line">        <span class="string">&quot;jsonp&quot;</span>: JSONP 格式使用 JSONP 形式调用函数时，如 <span class="string">&quot;myurl?callback=?&quot;</span> jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</span><br></pre></td></tr></table></figure>

<h1 id="实现一个单例模式？"><a href="#实现一个单例模式？" class="headerlink" title="实现一个单例模式？"></a>实现一个单例模式？</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">饿汉：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">singleton</span> </span>&#123;</span><br><span class="line">	<span class="comment">//私有化其构造方法，使得外部无法通过new获得新的实例。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> singleton instance=<span class="keyword">new</span> singleton();</span><br><span class="line">    <span class="comment">//无论如何都会创建一个实例，每次获取到的都是同一个对象，从而达到单例的目的；</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">懒汉：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">singleton_01</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">singleton_01</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> singleton_01 instance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> singleton_01 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span>==instance)&#123;</span><br><span class="line">            instance=<span class="keyword">new</span> singleton_01();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="字符串反转？"><a href="#字符串反转？" class="headerlink" title="字符串反转？"></a>字符串反转？</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(str);</span><br><span class="line">sb.reverse();</span><br></pre></td></tr></table></figure>

<h1 id="集合转数组？"><a href="#集合转数组？" class="headerlink" title="集合转数组？"></a>集合转数组？</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List strList = Arrays.asList(strArray);</span><br></pre></td></tr></table></figure>



<h1 id="数组转集合？"><a href="#数组转集合？" class="headerlink" title="数组转集合？"></a>数组转集合？</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] strArrayAfter = strList.toArray(<span class="keyword">new</span> String[strList.size()]);</span><br></pre></td></tr></table></figure>

<h1 id="集合反转？"><a href="#集合反转？" class="headerlink" title="集合反转？"></a>集合反转？</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.reverse(strList);</span><br></pre></td></tr></table></figure>

<h1 id="字符串类型转日期类型？"><a href="#字符串类型转日期类型？" class="headerlink" title="字符串类型转日期类型？"></a>字符串类型转日期类型？</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date date = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>).parse(s1);</span><br></pre></td></tr></table></figure>

<h1 id="日期转字符串？"><a href="#日期转字符串？" class="headerlink" title="日期转字符串？"></a>日期转字符串？</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>).format(date);</span><br></pre></td></tr></table></figure>

<h1 id="for循环、增强型for循环、lambda表达式中的foreach-区别？"><a href="#for循环、增强型for循环、lambda表达式中的foreach-区别？" class="headerlink" title="for循环、增强型for循环、lambda表达式中的foreach()区别？"></a>for循环、增强型for循环、lambda表达式中的foreach()区别？</h1><p>for循环：<br>优点：可以直接获取下标，能更精确的定位。下标变量属于循环内变量，循环结束会自动回收。下标变量的步长可以自定，比较灵活。<br>缺点：需要根据下标才会获取循环内容。只能循环有序集合和数组，如Set和Map就无法遍历。</p>
<p>增强for:<br>优点：循环直接进行赋值，直接得到循环对象，不需要通过下标获取。可以遍历所有集合类型和数组。</p>
<p>缺点：循环有序集合时无法定位下标，需要在循环外层定义下标。无法遍历Map类型。</p>
<p>foreach():<br>优点:可以对所有集合类型和Map进行循环，特别是支持对Map进行循环，循环也是直接进行赋值，直接得到循环对象。</p>
<p>缺点：循环有序集合时无法定位下标，无法遍历数组，因为理论上来说他是属于迭代器的一种。同时因为循环体属于一个封闭范围的线程，在循环体内使用部分循环体外的变量需要加final关键字，很不方便。</p>
<h1 id="Spring注入bean？"><a href="#Spring注入bean？" class="headerlink" title="Spring注入bean？"></a>Spring注入bean？</h1><p>1.构造器注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2.set注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.自动装配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>注解可以实现自动装配，只要在对应的属性上标记该注解，但是<span class="meta">@Autowired</span>注解只按照byType注入。</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span>注解可以实现自动装配，它有两个重要属性name和type，name属性解析为bean的名字，type属性则解析为bean的类型。所以如果使用name属性，则使用byName的自动注入策略，而使用type属性则使用byType自动注入策略。如果既不指定name也不指定type属性，这时将通过反射机制使用byName自动注入策略。</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span>注解和<span class="meta">@Resource</span>注解的作用相同，只不过<span class="meta">@Autowired</span>按照byType注入，如果<span class="meta">@Autowired</span>想使用名称可以结合<span class="meta">@Qualifier</span>注解进行使用</span><br></pre></td></tr></table></figure>



<h1 id="Spring获取bean？"><a href="#Spring获取bean？" class="headerlink" title="Spring获取bean？"></a>Spring获取bean？</h1><p><strong>一. 在初始化时保存ApplicationContext对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac =<span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">&quot;classpath:beans.xml&quot;</span>);</span><br><span class="line">ac.getBean(<span class="string">&quot;beanId&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>　说明：这种方式适用于采用Spring框架的独立应用程序，需要程序通过配置文件手工初始化Spring的情况。不难理解对于通过web.xml配置启动的Spring来说也一定是里面实现了此方法。</p>
<p>  <strong>二. 通过Spring提供的工具类获取ApplicationContext对象</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac1 = WebApplicationContextUtils.getRequiredWebApplicationContext(ServletContext sc); </span><br><span class="line">ApplicationContext ac2 = WebApplicationContextUtils.getWebApplicationContext(ServletContext sc); </span><br><span class="line">ac1.getBean(&quot;beanId&quot;); </span><br><span class="line">ac2.getBean(&quot;beanId&quot;);</span><br></pre></td></tr></table></figure>

<p>说明:这种方法适合于B/S模式，需要提供ServletContext,局限性比较大，至于以上两个方法区别是前者出错会抛出异常，而后者会返回null。</p>
<h5 id="三-继承自抽象类ApplicationObjectSupport"><a href="#三-继承自抽象类ApplicationObjectSupport" class="headerlink" title="三. 继承自抽象类ApplicationObjectSupport"></a>三. 继承自抽象类ApplicationObjectSupport</h5><p>说明：抽象类ApplicationObjectSupport提供getApplicationContext()方法，可以方便的获取ApplicationContext。</p>
<p>Spring初始化时，会通过该抽象类的setApplicationContext(ApplicationContext context)方法将ApplicationContext 对象注入。</p>
<h5 id="四-继承自抽象类WebApplicationObjectSupport"><a href="#四-继承自抽象类WebApplicationObjectSupport" class="headerlink" title="四. 继承自抽象类WebApplicationObjectSupport"></a>四. 继承自抽象类WebApplicationObjectSupport</h5><p>说明：类似上面方法，调用getWebApplicationContext()获取WebApplicationContext</p>
<h5 id="五：实现接口ApplicationContextAware"><a href="#五：实现接口ApplicationContextAware" class="headerlink" title="五：实现接口ApplicationContextAware"></a>五：实现接口ApplicationContextAware</h5><p>说明：实现该接口的setApplicationContext(ApplicationContext context)方法，并保存ApplicationContext 对象。Spring初始化时，会通过该方法将ApplicationContext对象注入。</p>
<p>　　<strong>相比下来对于需要获取已经启动的bean。我们需要获取bean方法，这时我们可以通过实现接口ApplicationContextAware来获取</strong>。</p>
<h1 id="Java中哪些类用到了哪些设计模式？"><a href="#Java中哪些类用到了哪些设计模式？" class="headerlink" title="Java中哪些类用到了哪些设计模式？"></a>Java中哪些类用到了哪些设计模式？</h1><p><strong>Java设计模式共有23中涉及模式，总体分为：创建型模式、结构型模式、行为型模式三类。</strong></p>
<h5 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h5><p>创建型模式的核心思想就是分装隐藏创建对象的逻辑方式，不让客户端直接通过new创建新对象。该分类下包含：<a href="https://www.zhihu.com/search?q=%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:911113273%7D">工厂模式</a>、抽象工厂模式、单例模式、建造者模式、原型模式共5种设计模式。</p>
<p>这里举几个例子：</p>
<p>工厂模式：java.util.Calendar#getInstance()</p>
<p>抽象工厂模式：DocumentBuilderFactory</p>
<p>单例模式：java.lang.Runtime#getRuntime()</p>
<p>建造者模式：StringBuilder</p>
<p>原型模式：Object.clone</p>
<h5 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h5><p>结构型模式注重类与对象之间的组合，用组合的方式来替代继承。该分类下包含：<a href="https://www.zhihu.com/search?q=%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:911113273%7D">适配器模式</a>、桥接模式、过滤器模式、组合模式、装饰器模式、外观模式、享元模式、代理模式共8中涉及模式。</p>
<p>这里举典型的例子：</p>
<p>代理模式-java.lang.reflect.Proxy</p>
<p>享元模式：java.lang.Byte#valueOf(byte)</p>
<h5 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h5><p>行为型模式关注的是对象之间的通讯交互，共有12中设计模式，<a href="https://www.zhihu.com/search?q=%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:911113273%7D">责任链模式</a>、命令模式、解释器模式、迭代器模式、中介者模式、备忘录模式、<a href="https://www.zhihu.com/search?q=%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:911113273%7D">观察者模式</a>、状态模式、空对象模式、策略模式、模版方法模式、<a href="https://www.zhihu.com/search?q=%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:911113273%7D">访问者模式</a>。</p>
<p>举个例子：</p>
<p>迭代器模式：java.util.Iterator</p>
<p>观察者模式：<a href="https://link.zhihu.com/?target=http://java.util.Observer">java.util.Observer</a></p>
<h1 id="SSM跟SpringBoot的区别？"><a href="#SSM跟SpringBoot的区别？" class="headerlink" title="SSM跟SpringBoot的区别？"></a>SSM跟SpringBoot的区别？</h1><ol>
<li>SSM是结合spring、springmvc、mybatis三个框架开发javaweb应用。</li>
<li>Springboot没有和任何框架进行绑定<br>2.1 你想开发web应用可以用springboot，用springboot-starter-web就帮你配置好了springmvc，你不想用springmvc，换成springwebflux，用springboot-starter-webflux就帮你配置好了。<br>2.2 你不想开发web应用，只实现纯粹的数据层业务，用springcloudstrean和task也是可以的。<br>2.3 但是必须知道，springboot只是提供的这些starters，这些starters本身依赖了对应框架或技术，但不包含对应的技术或框架本身。</li>
<li>Springboot不是全家桶，springboot没有包含springmvc、mybatis、spring，包含的只有他们对应的starters。</li>
<li>Springmvc、mybatis、spring就像硬件的显卡、声卡、网卡，而springboot提供的starters就像对应硬件的驱动，没有包含这些硬件本身，这些驱动能让你DIY的电脑顺畅引导（boot）并运行起来。</li>
<li>SSM类似于汽车的手动挡，你需要自己根据汽车需要（转速）改变挡位，而springboot类似于汽车的自动挡，无论速度是多少，你无需调整挡位，车机根据转速自动调整挡位，你只需要踩油门和备好刹车。</li>
</ol>
<h1 id="Mybatis一级缓存跟二级缓存的区别？"><a href="#Mybatis一级缓存跟二级缓存的区别？" class="headerlink" title="Mybatis一级缓存跟二级缓存的区别？"></a>Mybatis一级缓存跟二级缓存的区别？</h1><p><strong>一级缓存</strong>：它指的是Mybatis中sqlSession对象的缓存，当我们执行查询以后，查询的结果会同时存入到SqlSession为我们提供的一块区域中，该区域的结构是一个Map，当我们再次查询同样的数据，mybatis会<br>先去sqlsession中查询是否有，的话直接拿出来用，当SqlSession对象消失时，mybatis的一级缓存也就消失了，同时一级缓存是SqlSession范围的缓存，当调用SqlSession的修改、添加、删除、commit(),close等<br>方法时，就会清空一级缓存。</p>
<p><strong>二级缓存</strong>：他值得是Mybatis中SqlSessionFactory对象的缓存，由同一个SqlSessionFactory对象创建的SqlSession共享其缓存，但是其中缓存的是数据而不是对象，所以从二级缓存再次查询出得结果的对象与<br>第一次存入的对象是不一样的。</p>
<p><strong>总结：mybatis的的一级缓存是SqlSession级别的缓存，一级缓存缓存的是对象，当SqlSession提交、关闭以及其他的更新数据库的操作发生后，一级缓存就会清空。二级缓存是SqlSessionFactory级别的缓存，同一个SqlSessionFactory产生的SqlSession都共享一个二级缓存，二级缓存中存储的是数据，当命中二级缓存时，通过存储的数据构造对象返回。查询数据的时候，查询的流程是二级缓存&gt;一级缓存&gt;数据库。</strong></p>
<h1 id="IOC和AOP？"><a href="#IOC和AOP？" class="headerlink" title="IOC和AOP？"></a>IOC和AOP？</h1><p><strong>AOP（面向切面）</strong>是一种编程范式，提供从另一个角度来考虑程序结构以完善面向对象编程（OOP）。<br> AOP为开发者提供了一种描述横切关注点的机制，并能够自动将横切关注点织入到面向对象的软件系统中，从而实现了横切关注点的模块化。<br> AOP能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任，例如事务处理、日志管理、权限控制等，封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。</p>
<p><strong>使用AOP的好处</strong></p>
<ul>
<li>降低模块的耦合度</li>
<li>使系统容易扩展</li>
<li>提高代码复用性</li>
</ul>
<p><strong>AOP的基本概念</strong></p>
<ul>
<li>连接点（JoinPoint）：需要在程序中插入横切关注点的点，连接点可能是在类初始化、方法调用、字段调用或处理异常等等。Spring中只支持方法执行连接点。</li>
<li>切入点（Pointcut）：一组相关连接点的集合。</li>
<li>通知（Advice）：在连接点上执行的行为，增强提供了在AOP中需要在切入点所选择的连接点处进行扩展现有行为的手段。包括前置增强（before advice）、后置增强 (after advice)、环绕增强 （around advice）。</li>
<li>切面（Aspect）：通知和切入点的结合。</li>
<li>织入（Weaving）：织入是一个过程，是将切面应用到目标对象从而创建出AOP代理对象的过程。</li>
<li>代理（Proxy）：通过代理方式来对目标对象应用切面。AOP代理可以用JDK动态代理或CGLIB代理实现。</li>
<li>目标对象（Target）：需要被织入关注点的对象。即被代理的对象。</li>
</ul>
<p>实现AOP的主要设计模式就是动态代理。<br> Spring的动态代理有两种：一是JDK的动态代理；另一个是cglib动态代理。</p>
<p><strong>IOC（控制反转）</strong>就是依赖倒置原则的一种代码设计思路。就是把原先在代码里面需要实现的对象创建、对象之间的依赖，反转给容器来帮忙实现。<br> Spring IOC容器通过xml,注解等其它方式配置类及类之间的依赖关系，完成了对象的创建和依赖的管理注入。实现IOC的主要设计模式是工厂模式。<br><strong>使用IOC的好处</strong></p>
<ul>
<li>集中管理，实现类的可配置和易管理。</li>
<li>降低了类与类之间的耦合度。</li>
</ul>
<h1 id="怎么创建一个线程类？"><a href="#怎么创建一个线程类？" class="headerlink" title="怎么创建一个线程类？"></a>怎么创建一个线程类？</h1><p>Java使用Thread类代表线程，所有的线程对象都必须是Thread类或其子类的实例。Java可以用四种方式来创建线程，如下所示：</p>
<p>1）继承Thread类创建线程</p>
<p>2）实现Runnable接口创建线程</p>
<p>3）实现Callable（call方法作为线程执行体）和Future创建线程</p>
<p>4）使用线程池例如用Executor框架</p>
<h1 id="线程的生命周期？"><a href="#线程的生命周期？" class="headerlink" title="线程的生命周期？"></a>线程的生命周期？</h1><p>Java线程的生命周期包括5个阶段：新建、就绪、运行、阻塞、销毁。</p>
<p>新建：线程刚被创建，刚刚使用new方法创建的线程；</p>
<p>就绪：就是调用的线程的start()方法后，此时线程处于等待CPU分配资源阶段；</p>
<p>运行：当就绪的线程被调度并获得CPU资源时，便进入运行状态；</p>
<p>阻塞：在运行状态的时候，可能因为某些原因导致运行状态的线程变成了阻塞状态，比如调用sleep（）或者wait（）之后。</p>
<p>销毁：线程执行完毕或者运行中出现异常，此时线程要被销毁，回收资源。</p>
<h1 id="Mysql分组？"><a href="#Mysql分组？" class="headerlink" title="Mysql分组？"></a>Mysql分组？</h1><p> GROUP BY </p>
<h1 id="Oracle怎么实现分页？"><a href="#Oracle怎么实现分页？" class="headerlink" title="Oracle怎么实现分页？"></a>Oracle怎么实现分页？</h1><p>rownum</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> A.<span class="operator">*</span>, ROWNUM RN </span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> TABLE_NAME) A </span><br><span class="line"><span class="keyword">WHERE</span> ROWNUM <span class="operator">&lt;=</span> <span class="number">40</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span> RN <span class="operator">&gt;=</span> <span class="number">21</span></span><br><span class="line"></span><br><span class="line">其中最内层的查询<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> TABLE_NAME表示不进行翻页的 原始查询语句。ROWNUM <span class="operator">&lt;=</span> <span class="number">40</span>和RN <span class="operator">&gt;=</span> <span class="number">21</span>控制分页查询的每页的范围。</span><br></pre></td></tr></table></figure>

<h1 id="怎么优化一段SQL语句？"><a href="#怎么优化一段SQL语句？" class="headerlink" title="怎么优化一段SQL语句？"></a>怎么优化一段SQL语句？</h1><p><strong>第一：</strong> 选择最有效率的表名顺序(只在基于规则的seo/‘ target=’_blank’&gt;优化器中有效)： ORACLE 的解析器按照从右到左的顺序处理FROM子句中的表名，FROM子句中写在最后的表(基础表 driving table)将被最先处理，在FROM子句中包含多个表的情况下,你必须选择记录条数最少的表作为基础表。如果有3个以上的表连接查询, 那就需要选择交叉表(intersection table)作为基础表, 交叉表是指那个被其他表所引用的表.</p>
<p><strong>第二：</strong> WHERE子句中的连接顺序．： ORACLE采用自下而上的顺序解析WHERE子句,根据这个原理,表之间的连接必须写在其他WHERE条件之前, 那些可以过滤掉最大数量记录的条件必须写在WHERE子句的末尾.</p>
<p><strong>第三：</strong> SELECT子句中避免使用 ‘ * ‘： ORACLE在解析的过程中, 会将’*’ 依次转换成所有的列名, 这个工作是通过查询数据字典完成的, 这意味着将耗费更多的时间</p>
<p><strong>第四：</strong> 减少访问get=’_blank’&gt;数据库的次数： ORACLE在内部执行了许多工作: 解析SQL语句, 估算索引的利用率, 绑定变量 , 读数据块等；</p>
<p><strong>第五：</strong>在SQL<em>Plus , SQL</em>Forms和Pro*C中重新设置ARRAYSIZE参数, 可以增加每次get=’_blank’&gt;数据库访问的检索数据量 ,建议值为200</p>
<p><strong>第六：</strong> 使用DECODE函数来减少处理时间： 使用DECODE函数可以避免重复扫描相同记录或重复连接相同的表.</p>
<p><strong>第七：</strong> 整合简单,无关联的get=’_blank’&gt;数据库访问： 如果你有几个简单的get=’_blank’&gt;数据库查询语句,你可以把它们整合到一个查询中(即使它们之间没有关系)</p>
<p><strong>第八：</strong> 删除重复记录： 最高效的删除重复记录方法 ( 因为使用了ROWID)例子： DELETE FROM EMP E WHERE E.ROWID &gt; (SELECT MIN(X.ROWID) FROM EMP X WHERE X.EMP_NO = E.EMP_NO);</p>
<p><strong>第九：</strong> 用TRUNCATE替代DELETE： 当删除表中的记录时,在通常情况下, 回滚段(rollback segments ) 用来存放可以被恢复的信息. 如果你没有COMMIT事务,ORACLE会将数据恢复到删除之前的状态(准确地说是恢复到执行删除命令之前的状况) 而当运用TRUNCATE时, 回滚段不再存放任何可被恢复的信息.当命令运行后,数据不能被恢复.因此很少的资源被调用,执行时间也会很短. (译者按: TRUNCATE只在删除全表适用,TRUNCATE是DDL不是DML)</p>
<p><strong>第十：</strong> 尽量多使用COMMIT： 只要有可能,在程序中尽量多使用COMMIT, 这样程序的性能得到提高,需求也会因为COMMIT所释放的资源而减少: COMMIT所释放的资源: a. 回滚段上用于恢复数据的信息. b. 被程序语句获得的锁 c. redo log buffer 中的空间 d. ORACLE为管理上述3种资源中的内部花费</p>
<p><strong>第十一：</strong>用Where子句替换HAVING子句： 避免使用HAVING子句, HAVING 只会在检索出所有记录之后才对结果集进行过滤. 这个处理需要排序,总计等操作. 如果能通过WHERE子句限制记录的数目,那就能减少这方面的开销. (非oracle中)on、where、having这三个都可以加条件的子句中，on是最先执行，where次之，having最后，因为on是先把不符合条件的记录过滤后才进行统计，它就可以减少中间运算要处理的数据，按理说应该速度是最快的，where也应该比having快点的，因为它过滤数据后才进行sum，在两个表联接时才用on的，所以在一个表的时候，就剩下where跟having比较了。在这单表查询统计的情况下，如果要过滤的条件没有涉及到要计算字段，那它们的结果是一样的，只是where可以使用rushmore技术，而having就不能，在速度上后者要慢如果要涉及到计算的字段，就表示在没计算之前，这个字段的值是不确定的，根据上篇写的工作流程，where的作用时间是在计算之前就完成的，而having就是在计算后才起作用的，所以在这种情况下，两者的结果会不同。在多表联接查询时，on比where更早起作用。系统首先根据各个表之间的联接条件，把多个表合成一个临时表后，再由where进行过滤，然后再计算，计算完后再由having进行过滤。由此可见，要想过滤条件起到正确的作用，首先要明白这个条件应该在什么时候起作用，然后再决定放在那里</p>
<p><strong>第十二：</strong> 减少对表的查询： 在含有子查询的SQL语句中,要特别注意减少对表的查询.例子： SELECT TAB_NAME FROM TABLES WHERE (TAB_NAME,DB_VER) = ( SELECT TAB_NAME,DB_VER FROM TAB_COLUMNS WHERE VERSION = 604)</p>
<p><strong>第十三：</strong> 通过内部函数提高SQL效率.： 复杂的SQL往往牺牲了执行效率. 能够掌握上面的运用函数解决问题的方法在实际工作中是非常有意义的</p>
<p><strong>第十四：</strong>使用表的别名(Alias)： 当在SQL语句中连接多个表时, 请使用表的别名并把别名前缀于每个Column上.这样一来,就可以减少解析的时间并减少那些由Column歧义引起的语法错误.</p>
<p><strong>第十五：</strong> 用EXISTS替代IN、用NOT EXISTS替代NOT IN： 在许多基于基础表的查询中,为了满足一个条件,往往需要对另一个表进行联接.在这种情况下, 使用EXISTS(或NOT EXISTS)通常将提高查询的效率. 在子查询中,NOT IN子句将执行一个内部的排序和合并. 无论在哪种情况下,NOT IN都是最低效的 (因为它对子查询中的表执行了一个全表遍历). 为了避免使用NOT IN ,我们可以把它改写成外连接(Outer Joins)或NOT EXISTS. 例子：</p>
<p>（高效）SELECT * FROM EMP (基础表) WHERE EMPNO &gt; 0 AND EXISTS (SELECT ‘X’ FROM DEPT WHERE DEPT.DEPTNO = EMP.DEPTNO AND LOC = ‘MELB’) (低效)SELECT * FROM EMP (基础表) WHERE EMPNO &gt; 0 AND DEPTNO IN(SELECT DEPTNO FROM DEPT WHERE LOC = ‘MELB’)</p>
<p><strong>第十六：</strong> 识别’低效执行’的SQL语句： 虽然目前各种关于SQLseo/‘ target=’_blank’&gt;优化的图形化工具层出不穷,但是写出自己的SQL工具来解决问题始终是一个最好的方法： SELECT EXECUTIONS , DISK_READS, BUFFER_GETS, ROUND((BUFFER_GETS-DISK_READS)/BUFFER_GETS,2) Hit_radio, ROUND(DISK_READS/EXECUTIONS,2) Reads_per_run, SQL_TEXT FROM V$SQLAREA WHERE EXECUTIONS&gt;0 AND BUFFER_GETS &gt; 0 AND (BUFFER_GETS-DISK_READS)/BUFFER_GETS &lt; 0.8 ORDER BY 4 DESC;</p>
<p><strong>第十七：</strong>用索引提高效率： 索引是表的一个概念部分,用来提高检索数据的效率，ORACLE使用了一个复杂的自平衡B-tree结构. 通常,通过索引查询数据比全表扫描要快. 当ORACLE找出执行查询和Update语句的最佳路径时, ORACLEseo/‘ target=’_blank’&gt;优化器将使用索引. 同样在联结多个表时使用索引也可以提高效率. 另一个使用索引的好处是,它提供了主键(primary key)的唯一性验证.。那些LONG或LONG RAW数据类型, 你可以索引几乎所有的列. 通常, 在大型表中使用索引特别有效. 当然,你也会发现, 在扫描小表时,使用索引同样能提高效率. 虽然使用索引能得到查询效率的提高,但是我们也必须注意到它的代价. 索引需要空间来存储,也需要定期维护, 每当有记录在表中增减或索引列被修改时, 索引本身也会被修改. 这意味着每条记录的INSERT , DELETE , UPDATE将为此多付出4 , 5 次的磁盘I/O . 因为索引需要额外的存储空间和处理,那些不必要的索引反而会使查询反应时间变慢.。定期的重构索引是有必要的.： ALTER INDEX REBUILD</p>
<p><strong>第十八：</strong> 用EXISTS替换DISTINCT： 当提交一个包含一对多表信息(比如部门表和雇员表)的查询时,避免在SELECT子句中使用DISTINCT. 一般可以考虑用EXIST替换, EXISTS 使查询更为迅速,因为RDBMS核心模块将在子查询的条件一旦满足后,立刻返回结果. 例子： (低效): SELECT DISTINCT DEPT_NO,DEPT_NAME FROM DEPT D , EMP E WHERE D.DEPT_NO = E.DEPT_NO (高效): SELECT DEPT_NO,DEPT_NAME FROM DEPT D WHERE EXISTS ( SELECT ‘X’ FROM EMP E WHERE E.DEPT_NO = D.DEPT_NO);</p>
<p><strong>第十九：</strong> server/‘ target=’_blank’&gt;sql语句用大写的；因为oracle总是先解析server/‘ target=’_blank’&gt;sql语句，把小写的字母转换成大写的再执行</p>
<p><strong>第二十：</strong> 在java代码中尽量少用连接符“＋”连接字符串！</p>
<p><strong>第二十一：</strong> 避免在索引列上使用NOT 通常，　 我们要避免在索引列上使用NOT, NOT会产生在和在索引列上使用函数相同的影响. 当ORACLE”遇到”NOT,他就会停止使用索引转而执行全表扫描.</p>
<p><strong>第二十二：</strong> 避免在索引列上使用计算． WHERE子句中，如果索引列是函数的一部分．seo/‘ target=’_blank’&gt;优化器将不使用索引而使用全表扫描． 举例: 低效： SELECT … FROM DEPT WHERE SAL * 12 &gt; 25000; 高效: SELECT … FROM DEPT WHERE SAL &gt; 25000/12;</p>
<p><strong>第二十三：</strong> 用&gt;=替代&gt; 高效: SELECT * FROM EMP WHERE DEPTNO &gt;=4 低效: SELECT * FROM EMP WHERE DEPTNO &gt;3 两者的区别在于, 前者DBMS将直接跳到第一个DEPT等于4的记录而后者将首先定位到DEPTNO=3的记录并且向前扫描到第一个DEPT大于3的记录. </p>
<p><strong>第二十四：</strong> 用UNION替换OR (适用于索引列) 通常情况下, 用UNION替换WHERE子句中的OR将会起到较好的效果. 对索引列使用OR将造成全表扫描. 注意, 以上规则只针对多个索引列有效. 如果有column没有被索引, 查询效率可能会因为你没有选择OR而降低. 在下面的例子中, LOC_ID 和REGION上都建有索引. 高效: SELECT LOC_ID , LOC_DESC , REGION FROM LOCATION WHERE LOC_ID = 10 UNION SELECT LOC_ID , LOC_DESC , REGION FROM LOCATION WHERE REGION = “MELBOURNE” 低效: SELECT LOC_ID , LOC_DESC , REGION FROM LOCATION WHERE LOC_ID = 10 OR REGION = “MELBOURNE” 如果你坚持要用OR, 那就需要返回记录最少的索引列写在最前面.</p>
<p><strong>第二十五：</strong>用IN来替换OR 这是一条简单易记的规则，但是实际的执行效果还须检验，在ORACLE8i下，两者的执行路径似乎是相同的．　 低效: SELECT…. FROM LOCATION WHERE LOC_ID = 10 OR LOC_ID = 20 OR LOC_ID = 30 高效 SELECT… FROM LOCATION WHERE LOC_IN IN (10,20,30);</p>
<p><strong>第二十六：</strong> 避免在索引列上使用IS NULL和IS NOT NULL 避免在索引中使用任何可以为空的列，ORACLE将无法使用该索引．对于单列索引，如果列包含空值，索引中将不存在此记录. 对于复合索引，如果每个列都为空，索引中同样不存在此记录.　如果至少有一个列不为空，则记录存在于索引中．举例: 如果唯一性索引建立在表的A列和B列上, 并且表中存在一条记录的A,B值为(123,null) , ORACLE将不接受下一条具有相同A,B值（123,null）的记录(插入). 然而如果所有的索引列都为空，ORACLE将认为整个键值为空而空不等于空. 因此你可以插入1000 条具有相同键值的记录,当然它们都是空! 因为空值不存在于索引列中,所以WHERE子句中对索引列进行空值比较将使ORACLE停用该索引. 低效: (索引失效) SELECT … FROM DEPARTMENT WHERE DEPT_CODE IS NOT NULL; 高效: (索引有效) SELECT … FROM DEPARTMENT WHERE DEPT_CODE &gt;=0;</p>
<p><strong>第二十七：</strong> 总是使用索引的第一个列： 如果索引是建立在多个列上, 只有在它的第一个列(leading column)被where子句引用时,seo/‘ target=’_blank’&gt;优化器才会选择使用该索引. 这也是一条简单而重要的规则，当仅引用索引的第二个列时,seo/‘ target=’_blank’&gt;优化器使用了全表扫描而忽略了索引</p>
<p><strong>第二十八：</strong> 用UNION-ALL 替换UNION ( 如果有可能的话)： 当SQL 语句需要UNION两个查询结果集合时,这两个结果集合会以UNION-ALL的方式被合并, 然后在输出最终结果前进行排序. 如果用UNION ALL替代UNION, 这样排序就不是必要了. 效率就会因此得到提高. 需要注意的是，UNION ALL 将重复输出两个结果集合中相同记录. 因此各位还是要从业务需求分析使用UNION ALL的可行性. UNION 将对结果集合排序,这个操作会使用到SORT_AREA_SIZE这块内存. 对于这块内存的seo/‘ target=’_blank’&gt;优化也是相当重要的. 下面的SQL可以用来查询排序的消耗量 低效： SELECT ACCT_NUM, BALANCE_AMT FROM DEBIT_TRANSACTIONS WHERE TRAN_DATE = ‘31-DEC-95’ UNION SELECT ACCT_NUM, BALANCE_AMT FROM DEBIT_TRANSACTIONS WHERE TRAN_DATE = ‘31-DEC-95’ 高效: SELECT ACCT_NUM, BALANCE_AMT FROM DEBIT_TRANSACTIONS WHERE TRAN_DATE = ‘31-DEC-95’ UNION ALL SELECT ACCT_NUM, BALANCE_AMT FROM DEBIT_TRANSACTIONS WHERE TRAN_DATE = ‘31-DEC-95’</p>
<p><strong>第二十九：</strong> 用WHERE替代ORDER BY： ORDER BY 子句只在两种严格的条件下使用索引. ORDER BY中所有的列必须包含在相同的索引中并保持在索引中的排列顺序. ORDER BY中所有的列必须定义为非空. WHERE子句使用的索引和ORDER BY子句中所使用的索引不能并列. 例如: 表DEPT包含以下列: DEPT_CODE PK NOT NULL DEPT_DESC NOT NULL DEPT_TYPE NULL 低效: (索引不被使用) SELECT DEPT_CODE FROM DEPT ORDER BY DEPT_TYPE 高效: (使用索引) SELECT DEPT_CODE FROM DEPT WHERE DEPT_TYPE &gt; 0</p>
<p><strong>第三十：</strong> 避免改变索引列的类型.: 当比较不同数据类型的数据时, ORACLE自动对列进行简单的类型转换. 假设 EMPNO是一个数值类型的索引列. SELECT … FROM EMP WHERE EMPNO = ‘123’ 实际上,经过ORACLE类型转换, 语句转化为: SELECT … FROM EMP WHERE EMPNO = TO_NUMBER(‘123’) 幸运的是,类型转换没有发生在索引列上,索引的用途没有被改变. 现在,假设EMP_TYPE是一个字符类型的索引列. SELECT … FROM EMP WHERE EMP_TYPE = 123 这个语句被ORACLE转换为: SELECT … FROM EMP WHERETO_NUMBER(EMP_TYPE)=123 因为内部发生的类型转换, 这个索引将不会被用到! 为了避免ORACLE对你的SQL进行隐式的类型转换, 最好把类型转换用显式表现出来. 注意当字符和数值比较时, ORACLE会优先转换数值类型到字符类型</p>
<p><strong>第三十一：</strong> 需要当心的WHERE子句: 某些SELECT 语句中的WHERE子句不使用索引. 这里有一些例子. 在下面的例子里, (1)‘!=’ 将不使用索引. 记住, 索引只能告诉你什么存在于表中, 而不能告诉你什么不存在于表中. (2) ‘||’是字符连接函数. 就象其他函数那样, 停用了索引. (3) ‘+’是数学函数. 就象其他数学函数那样, 停用了索引. (4)相同的索引列不能互相比较,这将会启用全表扫描.</p>
<p><strong>第三十二：</strong> a. 如果检索数据量超过30%的表中记录数.使用索引将没有显著的效率提高. b. 在特定情况下, 使用索引也许会比全表扫描慢, 但这是同一个数量级上的区别. 而通常情况下,使用索引比全表扫描要块几倍乃至几千倍!</p>
<p><strong>第三十三：</strong> 避免使用耗费资源的操作: 带有DISTINCT,UNION,MINUS,INTERSECT,ORDER BY的SQL语句会启动SQL引擎 执行耗费资源的排序(SORT)功能. DISTINCT需要一次排序操作, 而其他的至少需要执行两次排序. 通常, 带有UNION, MINUS , INTERSECT的SQL语句都可以用其他方式重写. 如果你的get=’_blank’&gt;数据库的SORT_AREA_SIZE调配得好, 使用UNION , MINUS, INTERSECT也是可以考虑的, 毕竟它们的可读性很强</p>
<p><strong>第三十四：</strong> 优化GROUP BY: 提高GROUP BY 语句的效率, 可以通过将不需要的记录在GROUP BY 之前过滤掉.下面两个查询返回相同结果但第二个明显就快了许多. 低效: SELECT JOB , AVG(SAL) FROM EMP GROUP by JOB HAVING JOB = ‘PRESIDENT’ OR JOB = ‘MANAGER’ 高效: SELECT JOB , AVG(SAL) FROM EMP WHERE JOB = ‘PRESIDENT’ OR JOB = ‘MANAGER’ GROUP by JOB</p>
<h1 id="JQuery怎么获取类选择器？"><a href="#JQuery怎么获取类选择器？" class="headerlink" title="JQuery怎么获取类选择器？"></a>JQuery怎么获取类选择器？</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.class&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="JQuery怎么获取对象？"><a href="#JQuery怎么获取对象？" class="headerlink" title="JQuery怎么获取对象？"></a>JQuery怎么获取对象？</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、JQuery的核心的一些方法</span><br><span class="line">each(callback) <span class="string">&#x27;就像循环</span></span><br><span class="line"><span class="string">$(&quot;Element&quot;).length; ‘元素的个数，是个属性</span></span><br><span class="line"><span class="string">$(&quot;Element&quot;).size(); &#x27;</span>也是元素的个数，不过带括号是个方法</span><br><span class="line">$(<span class="string">&quot;Element&quot;</span>).get(); ‘某个元素在页面中的集合，以数组的形式存储</span><br><span class="line">$(<span class="string">&quot;Element&quot;</span>).get(index); <span class="string">&#x27;功能和上面的相同，index表示第几个元素，数组的下标</span></span><br><span class="line"><span class="string">$(&quot;Element&quot;).get().reverse(); ‘把得到的数组方向</span></span><br><span class="line"><span class="string">$(&quot;Element1&quot;).index($(&quot;Element2&quot;)); &#x27;</span>元素<span class="number">2</span>在元素<span class="number">1</span>中的索引值是。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、基本对象获取(注意这里获取的都是Jquery对象而不是Dom对象哦，但是他俩是可以转换滴)</span><br><span class="line">$(<span class="string">&quot;*&quot;</span>) ‘表示获取所有对象 但是我至今没这样用过</span><br><span class="line">$(<span class="string">&quot;#XXX&quot;</span>) <span class="string">&#x27;获得 id=XXX 的元素对象（id可以是标签的id或CSS样式id） 常用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$(&quot;input[name=&#x27;</span>username<span class="string">&#x27;]&quot;) 获得input标签中name=&#x27;</span>userName<span class="string">&#x27;的元素对象 常用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$(&quot;.abc&quot;) &#x27;</span> 获得样式<span class="class"><span class="keyword">class</span>的名字是.<span class="title">abc</span>的元素对象 常用</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">div</span>&quot;) &#x27; 标签选择器 选择所有的<span class="title">div</span>元素 常用</span></span><br><span class="line"><span class="class">$(&quot;#<span class="title">a</span>,.<span class="title">b</span>,<span class="title">span</span>&quot;) &#x27;表示获得<span class="title">ID</span>是<span class="title">a</span>的元素和使用了类样式<span class="title">b</span>的元素以及所有的<span class="title">span</span>元素</span></span><br><span class="line"><span class="class">$(&quot;#<span class="title">a</span> .<span class="title">b</span> <span class="title">p</span>&quot;) &#x27;<span class="title">ID</span>号是<span class="title">a</span>的并且使用了 <span class="title">b</span>样式的 所有的<span class="title">p</span>元素</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">3、层级元素获取</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">Element1</span> <span class="title">Element2</span> <span class="title">Element3</span> ....&quot;) &#x27;前面父级 后面是子集</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">div</span> &gt; <span class="title">p</span>&quot;) &#x27;获取<span class="title">div</span>下面的所有的 <span class="title">p</span>元素</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">div</span> + <span class="title">p</span>&quot;) &#x27;<span class="title">div</span>元素后面的第一个 <span class="title">p</span>元素</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">div</span> ~ <span class="title">p</span>&quot;) &#x27;<span class="title">div</span>后面的所有的 <span class="title">p</span>元素</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">4、简单对象获取</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">Element</span>:<span class="title">first</span>&quot;) &#x27;<span class="title">HTML</span>页面中某类元素的第一个元素</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">Element</span>:<span class="title">last</span>&quot;) &#x27;<span class="title">HTML</span>页面中某类元素的最后一个元素</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">Element</span>:<span class="title">not</span>(<span class="title">selector</span>)&quot;) &#x27;去除所有与给定选择器匹配的元素,如：$(&quot;<span class="title">input</span>:<span class="title">not</span>(:<span class="title">checked</span>)&quot;) 表示选择所有没有选中的复选框</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">Element</span>:<span class="title">even</span>&quot;) &#x27;获得偶数行</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">Element</span>:<span class="title">odd</span>“）&#x27;获得奇数行</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">Element</span>:<span class="title">eq</span>(<span class="title">index</span>)&quot;) &#x27;取得一个给定的索引值</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">Element</span>:<span class="title">gt</span>(<span class="title">index</span>)&quot;) &#x27;取得给定索引值的元素 之后的所有元素</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">Element</span>:<span class="title">lt</span>(<span class="title">index</span>)&quot;) &#x27;取得给定索引值的元素 之前的所有元素</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">5、内容对象的获取和对象可见性</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">Element</span>:<span class="title">contains</span>(<span class="title">text</span>)&quot;) &#x27;元素中是否包含<span class="title">text</span>文本内容</span></span><br><span class="line"><span class="class">$(&#x27;<span class="title">Element</span>:<span class="title">empty</span>&quot;) &#x27;获得元素不包含子元素或文本的</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">Element</span>:<span class="title">partnt</span>&quot;) &#x27;获得元素包含子元素或文本的</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">Element</span>:<span class="title">has</span>(<span class="title">selector</span>)&quot;) ‘是否包含某个元素， 如：$(&quot;<span class="title">p</span>:<span class="title">has</span>(<span class="title">span</span>)&quot;)表示所有包含<span class="title">span</span>元素的<span class="title">p</span>元素</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">Element</span>:<span class="title">hidden</span>&quot;) &#x27;选择所有可见元素</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">Element</span>:<span class="title">visible</span>&quot;) &#x27;选择所有不可见元素</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">6、其他对象获取方法</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">Element</span>[<span class="title">id</span>]&quot;) &#x27;所有带有<span class="title">ID</span>属性的元素</span></span><br><span class="line"><span class="class">$(&quot;<span class="title">Element</span>[<span class="title">attribute</span> </span>= youlika ]<span class="string">&quot; &#x27;获得所有某个属性为youlika的元素</span></span><br><span class="line"><span class="string">$(&quot;</span>Element[attribute != youlika ]<span class="string">&quot; &#x27;获得所有某个属性为不是youlika的元素</span></span><br><span class="line"><span class="string">$(&quot;</span>Element[attribute ^= youlika ]<span class="string">&quot; &#x27;获得所有某个属性为不是youlika的开头的元素</span></span><br><span class="line"><span class="string">$(&quot;</span>Element[attribute $= youlika ]<span class="string">&quot; &#x27;获得所有某个属性为不是youlika的结尾的元素</span></span><br><span class="line"><span class="string">$(&quot;</span>Element[attribute *= youlika ]<span class="string">&quot; &#x27;获得所有某个属性包含youlika的开头的元素</span></span><br><span class="line"><span class="string">$(&quot;</span>Element[selector1][selector2][....]<span class="string">&quot;) &#x27;符合属性选择器，比如$(&quot;</span>input[id][name][value=youlika ]<span class="string">&quot;)表示获得带有ID、Name以及value是youlika 的input元素。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">7、子元素的获取</span></span><br><span class="line"><span class="string">$(&quot;</span>Element:nth-child(index)<span class="string">&quot;) &#x27;选择父级下面的第n个元素</span></span><br><span class="line"><span class="string">$(&quot;</span>Element:nth-child(even)<span class="string">&quot;) &#x27;选择父级下面的偶数</span></span><br><span class="line"><span class="string">$(&quot;</span>Element:nth-child(odd)<span class="string">&quot;) &#x27;选择父级下面的奇数</span></span><br><span class="line"><span class="string">$(&quot;</span>Element:nth-child(<span class="number">3n</span>+<span class="number">1</span>)<span class="string">&quot;) &#x27;表达式</span></span><br><span class="line"><span class="string">$(&quot;</span>Element:first-child<span class="string">&quot;) &#x27;选择父级下面的第一个子元素</span></span><br><span class="line"><span class="string">$(&quot;</span>Element:last-child<span class="string">&quot;) &#x27;选择父级下面的最后一个子元素</span></span><br><span class="line"><span class="string">$(&quot;</span>Element:only-child<span class="string">&quot;) &#x27;匹配父级下的唯一的一个子级元素，例如dt在dl列表中唯一，那么将选择dt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">8、表单对象获取</span></span><br><span class="line"><span class="string">$(:input)//查找所有的Input元素，当然也包括下拉列表，文本域，单选框，复选框等。</span></span><br><span class="line"><span class="string">$(:text)//匹配所有的单行文本框</span></span><br><span class="line"><span class="string">$(:password)//匹配所有的密码框</span></span><br><span class="line"><span class="string">$(:radio)//匹配所有的单选按钮</span></span><br><span class="line"><span class="string">$(:checkbox)//匹配所有的复选框</span></span><br><span class="line"><span class="string">$(:submit)//匹配所有的提交按钮</span></span><br><span class="line"><span class="string">$(:image)//匹配所有的图像域，例如</span></span><br><span class="line"><span class="string">$(:reset)//匹配所有的重置按钮</span></span><br><span class="line"><span class="string">$(:button)//匹配所有的按钮</span></span><br><span class="line"><span class="string">$(:file)//匹配所有的文件上传域</span></span><br><span class="line"><span class="string">$(:hidden)//匹配所有的不可见元素或者type为hidden的元素</span></span><br><span class="line"><span class="string">$(:enabled)//匹配所有可用的input元素，比如radio:enabled表示匹配所有可用的单选按钮</span></span><br><span class="line"><span class="string">$(:disabled)//匹配所有的不可用input元素，作用与上相反</span></span><br><span class="line"><span class="string">$(:checked)//匹配所有选中的复选框元素</span></span><br><span class="line"><span class="string">$(:selected)//匹配所有的下拉列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">9、元素属性的设置与移除</span></span><br><span class="line"><span class="string">$(&quot;</span>Element<span class="string">&quot;).attr(name) &#x27;取得第一个匹配的属性值，比如$(&quot;</span>img<span class="string">&quot;).attr(&quot;</span>src<span class="string">&quot;)</span></span><br><span class="line"><span class="string">$(&quot;</span>Element<span class="string">&quot;.attr(key,value)&quot;</span>) <span class="string">&#x27;某一个元素设置属性</span></span><br><span class="line"><span class="string">$(&quot;Element&quot;.attr(&#123;key:value,key1:value,....&#125;)) ‘为某个元素一次性设置多个属性</span></span><br><span class="line"><span class="string">$(&quot;Element&quot;).attr(key,function) &#x27;</span>为所有匹配的元素设置一个计算的属性值。</span><br><span class="line">$(<span class="string">&quot;Element&quot;</span>).removeAttr(name)<span class="comment">//移除某一个属性</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue的生命周期？"><a href="#Vue的生命周期？" class="headerlink" title="Vue的生命周期？"></a>Vue的生命周期？</h1><p>1、beforeCreate（创建前）</p>
<p>2、created（创建后）</p>
<p>3、beforeMount（载入前）</p>
<p>4、mounted（载入后）</p>
<p>5、beforeUpdate（更新前）</p>
<p>6、updated（更新后）</p>
<p>7、beforeDestroy（销毁前）</p>
<p>8、destroyed（销毁后）</p>
<p>vue第一次页面加载会触发哪几个钩子函数？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">beforeCreate、created、beforeMount、mounted</span><br></pre></td></tr></table></figure>

<p>DOM 渲染在哪个周期中就已经完成？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mounted</span><br></pre></td></tr></table></figure>

<p><img  src="E:\txhexo\public\images\theme\vue生命周期图示.png"  ><span class="image-caption">vue生命周期图示</span></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>VueRouter</title>
    <url>/2022/01/28/VueRouter/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>输入以下命令，安装vue-router插件包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vue-router --save-dev</span><br></pre></td></tr></table></figure>

<p>如果在一个模块化工程中使用它，必须要通过Vue.use()明确地安装路由功能：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>1.定义一个Content.vue的组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;内容&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&quot;content&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>2.新建一个router文件夹存放路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span></span><br><span class="line"><span class="keyword">import</span> Content <span class="keyword">from</span> <span class="string">&#x27;../components/Content&#x27;</span></span><br><span class="line"><span class="comment">//安装路由</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置导出路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">   <span class="attr">routes</span>:[&#123;</span><br><span class="line">       <span class="comment">//路由路径</span></span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/content&#x27;</span>,</span><br><span class="line">       <span class="comment">//路由名称</span></span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">        <span class="comment">//跳转组件</span></span><br><span class="line">        <span class="attr">component</span>:Content</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>3.在main.js中配置路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span> <span class="comment">//自动扫描里面的路由配置</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span><span class="comment">//来关闭生产模式下给出的提示</span></span><br><span class="line"><span class="comment">//显示声明使用VueRouter</span></span><br><span class="line">Vue.use(router);</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,<span class="comment">//配置路由</span></span><br><span class="line">  <span class="attr">components</span>: &#123; App &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>4.在App.vue中使用路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;router-link to=&quot;/content&quot;&gt;内容&lt;/router-link&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
