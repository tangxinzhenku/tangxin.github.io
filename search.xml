<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于hexo</title>
    <url>/2021/09/29/%E5%85%B3%E4%BA%8Ehexo/</url>
    <content><![CDATA[<h1 id="1-Hexo简介"><a href="#1-Hexo简介" class="headerlink" title="1.Hexo简介"></a>1.Hexo简介</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p>
<h1 id="2-Hexo搭建步骤"><a href="#2-Hexo搭建步骤" class="headerlink" title="2.Hexo搭建步骤"></a>2.Hexo搭建步骤</h1><p>安装Git<br>安装Node.js<br>安装Hexo<br>GitHub创建个人仓库<br>生成SSH添加到GitHub<br>将hexo部署到GitHub<br>设置个人域名<br>发布文章</p>
<h2 id="2-1安装Git"><a href="#2-1安装Git" class="headerlink" title="2.1安装Git"></a>2.1安装Git</h2><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。</p>
<p>windows：到git官网上下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p>
<p>linux：sudo apt-get install git<br>安装好后，用git –version 来查看一下版本</p>
<h2 id="2-2安装nodejs"><a href="#2-2安装nodejs" class="headerlink" title="2.2安装nodejs"></a>2.2安装nodejs</h2><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p>
<p>windows：nodejs选择LTS版本就行了。</p>
<p>linux：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure>


<p>安装完后，打开命令行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>


<p>检查一下有没有安装成功</p>
<h2 id="2-3安装hexo"><a href="#2-3安装hexo" class="headerlink" title="2.3安装hexo"></a>2.3安装hexo</h2><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p>
<p>输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>


<p>依旧用hexo -v查看一下版本</p>
<p>至此就全部安装完了。</p>
<p>接下来初始化一下hexo</p>
<p>hexo init myblog<br>这个myblog可以自己取什么名字都行，然后</p>
<p>cd myblog //进入这个myblog文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>


<p>新建完成后，指定文件夹目录下有：</p>
<p>node_modules: 依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章<br>themes：主题<br>** _config.yml: 博客的配置文件**<br>hexo g<br>hexo server<br>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p>
<p>使用ctrl+c可以把服务关掉。</p>
<h2 id="2-4GitHub创建个人仓库"><a href="#2-4GitHub创建个人仓库" class="headerlink" title="2.4GitHub创建个人仓库"></a>2.4GitHub创建个人仓库</h2><p>首先，你先要有一个GitHub账户，去注册一个吧。</p>
<p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p>
<p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。</p>
<p>点击create repository。</p>
<h2 id="2-5生成SSH添加到GitHub"><a href="#2-5生成SSH添加到GitHub" class="headerlink" title="2.5生成SSH添加到GitHub"></a>2.5生成SSH添加到GitHub</h2><p>回到你的git bash中，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>

<p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p>
<p>可以用以下两条，检查一下你有没有输对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>

<p>然后创建SSH,一路回车</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>

<p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p>
<p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p>
<p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p>
<p>在gitbash中，查看是否成功</p>
<p>ssh -T <a href="mailto:&#x67;&#105;&#116;&#64;&#x67;&#105;&#116;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;">&#x67;&#105;&#116;&#64;&#x67;&#105;&#116;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;</a></p>
<h2 id="2-6将hexo部署到GitHub"><a href="#2-6将hexo部署到GitHub" class="headerlink" title="2.6将hexo部署到GitHub"></a>2.6将hexo部署到GitHub</h2><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/xxx/xxx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean //清除了你之前生成的东西，也可以不加</span><br><span class="line">hexo generate //生成静态文章，可以用 hexo g缩写</span><br><span class="line">hexo deploy //部署文章，可以用hexo d缩写</span><br></pre></td></tr></table></figure>

<p>注意deploy时可能要你输入username和password。</p>
<p>得到下图就说明部署成功了，过一会儿就可以在<a href="http://xxxx.github.io/">http://xxxx.github.io</a> 这个网站看到你的博客了！！</p>
<h2 id="2-7设置个人域名"><a href="#2-7设置个人域名" class="headerlink" title="2.7设置个人域名"></a>2.7设置个人域名</h2><p>现在你的个人网站的地址是xxxx.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。</p>
<p>注册一个阿里云账户,在阿里云上买一个域名.</p>
<p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p>
<p>点解析进去，添加解析。</p>
<p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p>
<p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p>
<p>最后，在gitbash中，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p>
<p>接下来你就可以正式开始写文章了。</p>
<p>hexo使用详情见<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Stack栈</title>
    <url>/2022/01/22/Stack%E4%B8%8EDeque/</url>
    <content><![CDATA[<h1 id="Java-Stack类"><a href="#Java-Stack类" class="headerlink" title="Java Stack类"></a>Java Stack类</h1><p>是Vector的一个子类，它栈实现了一个标准的后进先出的栈。</p>
<p>除了定义了向量定义的所有方法，也定义了自己的一些方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span><span class="comment">//判断堆栈是否为空</span></span></span><br><span class="line"><span class="function">Object <span class="title">peek</span><span class="params">()</span><span class="comment">//查看堆栈顶部的对象，但不从堆栈中移除它</span></span></span><br><span class="line"><span class="function">Object <span class="title">pop</span><span class="params">()</span><span class="comment">//移除堆栈顶部的对象，并作为此函数的值返回该对象</span></span></span><br><span class="line"><span class="function">Object <span class="title">push</span><span class="params">(Object element)</span><span class="comment">//把该对象压入堆栈顶部</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(Object element)</span><span class="comment">//返回对象在堆栈中的位置，以1为基数</span></span></span><br></pre></td></tr></table></figure>

<h1 id="Java-Deque类"><a href="#Java-Deque类" class="headerlink" title="Java Deque类"></a>Java Deque类</h1><p><a href="https://so.csdn.net/so/search?q=Deque&spm=1001.2101.3001.7020">Deque</a>是一个双端队列接口，继承自Queue接口，Deque的实现类是LinkedList、ArrayDeque、LinkedBlockingDeque，其中LinkedList是最常用的。</p>
<p>Deque有三种用途：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通队列(一端进另一端出):</span></span><br><span class="line">Queue queue = <span class="keyword">new</span> LinkedList()或Deque deque = <span class="keyword">new</span> LinkedList()</span><br><span class="line"><span class="comment">//双端队列(两端都可进出)</span></span><br><span class="line">Deque deque = <span class="keyword">new</span> LinkedList()</span><br><span class="line"><span class="comment">//堆栈</span></span><br><span class="line">Deque deque = <span class="keyword">new</span> LinkedList()</span><br><span class="line"><span class="comment">//把Deque当栈用的时候：</span></span><br><span class="line">push(E e)<span class="comment">//入栈</span></span><br><span class="line">poll() <span class="comment">//出栈,pop() 后者在栈空的时候会抛出异常，前者返回null</span></span><br><span class="line">peek() <span class="comment">//查看栈顶,为空时返回null</span></span><br><span class="line"><span class="comment">//把Deque当队列用的时候：</span></span><br><span class="line">offer(E e)<span class="comment">//入队	</span></span><br><span class="line">poll() <span class="comment">//出队,为空时返回null</span></span><br><span class="line">peek() <span class="comment">//查看队首,为空时返回null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从上面(头部)插入：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的前面 ，空间不足抛异常</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的前面 ，空间不足插入失败返回回false</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的前面 ，空间不足抛异常</span></span></span><br><span class="line"><span class="function"><span class="comment">//从上面(头部)出来:</span></span></span><br><span class="line"><span class="function">E <span class="title">removeFirst</span><span class="params">()</span>	<span class="comment">//检索并删除第一个元素，为空时抛出异常</span></span></span><br><span class="line"><span class="function">E <span class="title">remove</span><span class="params">()</span>	<span class="comment">//和removeFirst一样 检索并删除第一个元素，为空时抛出异常</span></span></span><br><span class="line"><span class="function">E <span class="title">pop</span><span class="params">()</span>	<span class="comment">//和removeFirst一样 检索并删除第一个元素，为空时抛出异常</span></span></span><br><span class="line"><span class="function">E <span class="title">pollFirst</span><span class="params">()</span>	<span class="comment">//检索并删除第一个元素 ，为空时返回null</span></span></span><br><span class="line"><span class="function">E <span class="title">poll</span><span class="params">()</span>	<span class="comment">//和pollFirst一样 检索并删除第一个元素 ，为空时返回null</span></span></span><br><span class="line"><span class="function">E <span class="title">getFirst</span><span class="params">()</span>	<span class="comment">//只看看第一个元素 ，不出来，为空就抛异常</span></span></span><br><span class="line"><span class="function">E <span class="title">element</span><span class="params">()</span>	<span class="comment">//和getFirst一样 只看看第一个元素 ，不出来，为空就抛异常</span></span></span><br><span class="line"><span class="function">E <span class="title">peekFirst</span><span class="params">()</span>	<span class="comment">//只看看第一个元素 ，不出来，为空时返回null</span></span></span><br><span class="line"><span class="function">E <span class="title">peek</span><span class="params">()</span>	<span class="comment">//和peekFirst一样 只看看第一个元素 ，不出来，为空时返回null</span></span></span><br><span class="line"><span class="function"><span class="comment">//从下面(尾部)插入：</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的后面 ，空间不足抛异常</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的后面，空间不足返回false</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的后面，空间不足抛异常</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的后面，空间不足返回false</span></span></span><br><span class="line"><span class="function"><span class="comment">//从下面(尾部)出来:</span></span></span><br><span class="line"><span class="function">E <span class="title">removeLast</span><span class="params">()</span>	<span class="comment">//检索并删除最后一个元素，为空时抛出异常</span></span></span><br><span class="line"><span class="function">E <span class="title">pollLast</span><span class="params">()</span>	<span class="comment">//检索并删除最后一个元素 ，为空时返回null</span></span></span><br><span class="line"><span class="function">E <span class="title">getLast</span><span class="params">()</span>	<span class="comment">//只看看最后一个元素 ，不出来，为空就抛异常</span></span></span><br><span class="line"><span class="function">E <span class="title">peekLast</span><span class="params">()</span>	<span class="comment">//只看看最后一个元素 ，不出来，为空时返回null</span></span></span><br></pre></td></tr></table></figure>

<h1 id="经典算法题"><a href="#经典算法题" class="headerlink" title="经典算法题"></a>经典算法题</h1><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p>
<p>示例 1：</p>
<p>输入：s = “()”<br>输出：true<br>示例 2：</p>
<p>输入：s = “()[]{}”<br>输出：true<br>示例 3：</p>
<p>输入：s = “(]”<br>输出：false</p>
<p>来源：力扣（LeetCode）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&#x27;(&#x27;</span> == c)&#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;&#123;&#x27;</span> == c)&#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;[&#x27;</span> == c)&#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.isEmpty() || c != stack.peek())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：Java堆栈[Stack类]已经过时，Java官方推荐使用Deque替代Stack使用。Deque堆栈操作方法：push()、pop()、peek()。</strong></p>
]]></content>
      <categories>
        <category>栈堆</category>
      </categories>
      <tags>
        <tag>栈堆</tag>
      </tags>
  </entry>
</search>
