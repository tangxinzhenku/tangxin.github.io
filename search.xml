<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于hexo</title>
    <url>/2021/09/29/%E5%85%B3%E4%BA%8Ehexo/</url>
    <content><![CDATA[<h1 id="1-Hexo简介"><a href="#1-Hexo简介" class="headerlink" title="1.Hexo简介"></a>1.Hexo简介</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p>
<h1 id="2-Hexo搭建步骤"><a href="#2-Hexo搭建步骤" class="headerlink" title="2.Hexo搭建步骤"></a>2.Hexo搭建步骤</h1><p>安装Git<br>安装Node.js<br>安装Hexo<br>GitHub创建个人仓库<br>生成SSH添加到GitHub<br>将hexo部署到GitHub<br>设置个人域名<br>发布文章</p>
<h2 id="2-1安装Git"><a href="#2-1安装Git" class="headerlink" title="2.1安装Git"></a>2.1安装Git</h2><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。</p>
<p>windows：到git官网上下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p>
<p>linux：sudo apt-get install git<br>安装好后，用git –version 来查看一下版本</p>
<h2 id="2-2安装nodejs"><a href="#2-2安装nodejs" class="headerlink" title="2.2安装nodejs"></a>2.2安装nodejs</h2><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p>
<p>windows：nodejs选择LTS版本就行了。</p>
<p>linux：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure>


<p>安装完后，打开命令行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>


<p>检查一下有没有安装成功</p>
<h2 id="2-3安装hexo"><a href="#2-3安装hexo" class="headerlink" title="2.3安装hexo"></a>2.3安装hexo</h2><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p>
<p>输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>


<p>依旧用hexo -v查看一下版本</p>
<p>至此就全部安装完了。</p>
<p>接下来初始化一下hexo</p>
<p>hexo init myblog<br>这个myblog可以自己取什么名字都行，然后</p>
<p>cd myblog //进入这个myblog文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>


<p>新建完成后，指定文件夹目录下有：</p>
<p>node_modules: 依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章<br>themes：主题<br>** _config.yml: 博客的配置文件**<br>hexo g<br>hexo server<br>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p>
<p>使用ctrl+c可以把服务关掉。</p>
<h2 id="2-4GitHub创建个人仓库"><a href="#2-4GitHub创建个人仓库" class="headerlink" title="2.4GitHub创建个人仓库"></a>2.4GitHub创建个人仓库</h2><p>首先，你先要有一个GitHub账户，去注册一个吧。</p>
<p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p>
<p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。</p>
<p>点击create repository。</p>
<h2 id="2-5生成SSH添加到GitHub"><a href="#2-5生成SSH添加到GitHub" class="headerlink" title="2.5生成SSH添加到GitHub"></a>2.5生成SSH添加到GitHub</h2><p>回到你的git bash中，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>

<p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p>
<p>可以用以下两条，检查一下你有没有输对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>

<p>然后创建SSH,一路回车</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>

<p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p>
<p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p>
<p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p>
<p>在gitbash中，查看是否成功</p>
<p>ssh -T <a href="mailto:&#x67;&#105;&#116;&#64;&#x67;&#105;&#116;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;">&#x67;&#105;&#116;&#64;&#x67;&#105;&#116;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;</a></p>
<h2 id="2-6将hexo部署到GitHub"><a href="#2-6将hexo部署到GitHub" class="headerlink" title="2.6将hexo部署到GitHub"></a>2.6将hexo部署到GitHub</h2><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/xxx/xxx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean //清除了你之前生成的东西，也可以不加</span><br><span class="line">hexo generate //生成静态文章，可以用 hexo g缩写</span><br><span class="line">hexo deploy //部署文章，可以用hexo d缩写</span><br></pre></td></tr></table></figure>

<p>注意deploy时可能要你输入username和password。</p>
<p>得到下图就说明部署成功了，过一会儿就可以在<a href="http://xxxx.github.io/">http://xxxx.github.io</a> 这个网站看到你的博客了！！</p>
<h2 id="2-7设置个人域名"><a href="#2-7设置个人域名" class="headerlink" title="2.7设置个人域名"></a>2.7设置个人域名</h2><p>现在你的个人网站的地址是xxxx.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。</p>
<p>注册一个阿里云账户,在阿里云上买一个域名.</p>
<p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p>
<p>点解析进去，添加解析。</p>
<p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p>
<p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p>
<p>最后，在gitbash中，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p>
<p>接下来你就可以正式开始写文章了。</p>
<p>hexo使用详情见<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Stack与Deque</title>
    <url>/2022/01/22/Stack%E4%B8%8EDeque/</url>
    <content><![CDATA[<h1 id="Java-Stack类"><a href="#Java-Stack类" class="headerlink" title="Java Stack类"></a>Java Stack类</h1><p>是Vector的一个子类，它栈实现了一个标准的后进先出的栈。</p>
<p>除了定义了向量定义的所有方法，也定义了自己的一些方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span><span class="comment">//判断堆栈是否为空</span></span></span><br><span class="line"><span class="function">Object <span class="title">peek</span><span class="params">()</span><span class="comment">//查看堆栈顶部的对象，但不从堆栈中移除它</span></span></span><br><span class="line"><span class="function">Object <span class="title">pop</span><span class="params">()</span><span class="comment">//移除堆栈顶部的对象，并作为此函数的值返回该对象</span></span></span><br><span class="line"><span class="function">Object <span class="title">push</span><span class="params">(Object element)</span><span class="comment">//把该对象压入堆栈顶部</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(Object element)</span><span class="comment">//返回对象在堆栈中的位置，以1为基数</span></span></span><br></pre></td></tr></table></figure>

<h1 id="Java-Deque类"><a href="#Java-Deque类" class="headerlink" title="Java Deque类"></a>Java Deque类</h1><p><a href="https://so.csdn.net/so/search?q=Deque&spm=1001.2101.3001.7020">Deque</a>是一个双端队列接口，继承自Queue接口，Deque的实现类是LinkedList、ArrayDeque、LinkedBlockingDeque，其中LinkedList是最常用的。</p>
<p>Deque有三种用途：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通队列(一端进另一端出):</span></span><br><span class="line">Queue queue = <span class="keyword">new</span> LinkedList()或Deque deque = <span class="keyword">new</span> LinkedList()</span><br><span class="line"><span class="comment">//双端队列(两端都可进出)</span></span><br><span class="line">Deque deque = <span class="keyword">new</span> LinkedList()</span><br><span class="line"><span class="comment">//堆栈</span></span><br><span class="line">Deque deque = <span class="keyword">new</span> LinkedList()</span><br><span class="line"><span class="comment">//把Deque当栈用的时候：</span></span><br><span class="line">push(E e)<span class="comment">//入栈</span></span><br><span class="line">poll() <span class="comment">//出栈,pop() 后者在栈空的时候会抛出异常，前者返回null</span></span><br><span class="line">peek() <span class="comment">//查看栈顶,为空时返回null</span></span><br><span class="line"><span class="comment">//把Deque当队列用的时候：</span></span><br><span class="line">offer(E e)<span class="comment">//入队	</span></span><br><span class="line">poll() <span class="comment">//出队,为空时返回null</span></span><br><span class="line">peek() <span class="comment">//查看队首,为空时返回null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从上面(头部)插入：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的前面 ，空间不足抛异常</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的前面 ，空间不足插入失败返回回false</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的前面 ，空间不足抛异常</span></span></span><br><span class="line"><span class="function"><span class="comment">//从上面(头部)出来:</span></span></span><br><span class="line"><span class="function">E <span class="title">removeFirst</span><span class="params">()</span>	<span class="comment">//检索并删除第一个元素，为空时抛出异常</span></span></span><br><span class="line"><span class="function">E <span class="title">remove</span><span class="params">()</span>	<span class="comment">//和removeFirst一样 检索并删除第一个元素，为空时抛出异常</span></span></span><br><span class="line"><span class="function">E <span class="title">pop</span><span class="params">()</span>	<span class="comment">//和removeFirst一样 检索并删除第一个元素，为空时抛出异常</span></span></span><br><span class="line"><span class="function">E <span class="title">pollFirst</span><span class="params">()</span>	<span class="comment">//检索并删除第一个元素 ，为空时返回null</span></span></span><br><span class="line"><span class="function">E <span class="title">poll</span><span class="params">()</span>	<span class="comment">//和pollFirst一样 检索并删除第一个元素 ，为空时返回null</span></span></span><br><span class="line"><span class="function">E <span class="title">getFirst</span><span class="params">()</span>	<span class="comment">//只看看第一个元素 ，不出来，为空就抛异常</span></span></span><br><span class="line"><span class="function">E <span class="title">element</span><span class="params">()</span>	<span class="comment">//和getFirst一样 只看看第一个元素 ，不出来，为空就抛异常</span></span></span><br><span class="line"><span class="function">E <span class="title">peekFirst</span><span class="params">()</span>	<span class="comment">//只看看第一个元素 ，不出来，为空时返回null</span></span></span><br><span class="line"><span class="function">E <span class="title">peek</span><span class="params">()</span>	<span class="comment">//和peekFirst一样 只看看第一个元素 ，不出来，为空时返回null</span></span></span><br><span class="line"><span class="function"><span class="comment">//从下面(尾部)插入：</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的后面 ，空间不足抛异常</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的后面，空间不足返回false</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的后面，空间不足抛异常</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span>	<span class="comment">//将指定的元素插入此双端队列的后面，空间不足返回false</span></span></span><br><span class="line"><span class="function"><span class="comment">//从下面(尾部)出来:</span></span></span><br><span class="line"><span class="function">E <span class="title">removeLast</span><span class="params">()</span>	<span class="comment">//检索并删除最后一个元素，为空时抛出异常</span></span></span><br><span class="line"><span class="function">E <span class="title">pollLast</span><span class="params">()</span>	<span class="comment">//检索并删除最后一个元素 ，为空时返回null</span></span></span><br><span class="line"><span class="function">E <span class="title">getLast</span><span class="params">()</span>	<span class="comment">//只看看最后一个元素 ，不出来，为空就抛异常</span></span></span><br><span class="line"><span class="function">E <span class="title">peekLast</span><span class="params">()</span>	<span class="comment">//只看看最后一个元素 ，不出来，为空时返回null</span></span></span><br></pre></td></tr></table></figure>

<h1 id="经典算法题"><a href="#经典算法题" class="headerlink" title="经典算法题"></a>经典算法题</h1><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p>
<p>示例 1：</p>
<p>输入：s = “()”<br>输出：true<br>示例 2：</p>
<p>输入：s = “()[]{}”<br>输出：true<br>示例 3：</p>
<p>输入：s = “(]”<br>输出：false</p>
<p>来源：力扣（LeetCode）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&#x27;(&#x27;</span> == c)&#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;&#123;&#x27;</span> == c)&#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;[&#x27;</span> == c)&#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.isEmpty() || c != stack.peek())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：Java堆栈[Stack类]已经过时，Java官方推荐使用Deque替代Stack使用。Deque堆栈操作方法：push()、pop()、peek()。</strong></p>
]]></content>
      <categories>
        <category>栈堆</category>
      </categories>
      <tags>
        <tag>栈堆</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack</title>
    <url>/2022/01/28/webpack/</url>
    <content><![CDATA[<h1 id="使用WebPack"><a href="#使用WebPack" class="headerlink" title="使用WebPack"></a>使用WebPack</h1><p>1.创建项目</p>
<p>2.创建一个名为modules的目录，用于放置js模块等资源文件</p>
<p>3.在modules下创建模块文件，如hello.js，用于编写js模块相关代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 暴露一个方法sayHi</span></span><br><span class="line"><span class="built_in">exports</span>.sayHi=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;div&gt;hello webpack&lt;/div&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.在modules下创建一个名为main.js的入口文件，用于打包时设置entry属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//require导入一个模块，就可以调用这个模块中的方法了</span></span><br><span class="line"><span class="keyword">var</span> hello= <span class="built_in">require</span>(<span class="string">&quot;./hello&quot;</span>);</span><br><span class="line">hello.sayHi();</span><br></pre></td></tr></table></figure>

<p>5.在项目目录下创建webpack.config.js配置文件，使用webpack命令打包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./modules/main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;./js/bundle.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span> <span class="comment">//development开发环境 production生产环境变量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>6.在项目目录下创建index.html文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/js/bundle.js&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>7.在idea控制台中直接执行webpack；如果失败的话，就使用管理员权限运行即可！</p>
<p>8.运行Html文件看效果</p>
<p><strong>说明：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数 --watach用于监听变化</span></span><br><span class="line">webpack --watch</span><br></pre></td></tr></table></figure>

<p><strong>安装：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br><span class="line">npm install webpack -cli -g</span><br><span class="line"></span><br><span class="line">webpack -v //测试安装是否成功</span><br><span class="line">webpack -cli -v</span><br></pre></td></tr></table></figure>

<p><strong>配置</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">entry:入口文件，指定webpack用哪个文件作为文件的入口</span><br><span class="line"><span class="attr">output</span>:输出，指定webpack把处理完成的文件放置到指定路径</span><br><span class="line"><span class="attr">module</span>:模块，用于处理各种类型的文件</span><br><span class="line"><span class="attr">plugins</span>:插件，如：热更新、代码重用等</span><br><span class="line"><span class="attr">resolve</span>:设置路径指向</span><br><span class="line"><span class="attr">watch</span>:监听,用于设置文件改动后直接打包</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">	<span class="attr">entry</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">	<span class="attr">output</span>:&#123;</span><br><span class="line">		<span class="attr">path</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="attr">filename</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">module</span>:&#123;</span><br><span class="line">		<span class="attr">loaders</span>:[</span><br><span class="line">			&#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>, loader: <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">plugins</span>:&#123;&#125;,</span><br><span class="line">	<span class="attr">resolve</span>:&#123;&#125;,</span><br><span class="line">	<span class="attr">watch</span>:ture</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>面试经</title>
    <url>/2022/02/12/%E9%9D%A2%E8%AF%95%E7%BB%8F/</url>
    <content><![CDATA[<h1 id="Spring-Boot打成的jar与普通的jar有什么区别？"><a href="#Spring-Boot打成的jar与普通的jar有什么区别？" class="headerlink" title="Spring Boot打成的jar与普通的jar有什么区别？"></a>Spring Boot打成的jar与普通的jar有什么区别？</h1><p>Spring Boot的项目终止以jar包的形式进行打包，这种jar包可以通过可以通过命令（java -jar xxx.jar）来运行的，这种jar包不能被其他项目所依赖，即使被依赖了也不能直接使用其中的类。普通的jar包，解压后直接就是包名，包里就是我们的代码，而 Spring Boot 打包成的可执行 jar 解压后，在 \BOOT-INF\classes 目录下才是我们的代码，因此无法被直接引用。如果非要引用，可以在 pom.xml 文件中增加配置，将 Spring Boot 项目打包成两个 jar ，一个可执行，一个可引用。</p>
<h1 id="Spring-Boot如何定义多套不同的环境配置？"><a href="#Spring-Boot如何定义多套不同的环境配置？" class="headerlink" title="Spring Boot如何定义多套不同的环境配置？"></a>Spring Boot如何定义多套不同的环境配置？</h1><p>一个程序可能在不同的环境下运行，如开发环境(dev)、测试环境（test)、生成环境（prod）。</p>
<p>配置不同环境的配置文件：</p>
<ul>
<li>application.properties/yml</li>
<li>application-dev.properties/yml(开发环境)</li>
<li>application-test.properties/yml(测试环境)</li>
<li>application-uat.properties/yml(预发布环境)</li>
<li>application-prod.properties/yml(生产环境)</li>
</ul>
<p>指定环境运行：</p>
<ol>
<li>在cmd命令中指定：java -jar xxx.jar —spring.profiles.actvie=dev</li>
<li>在application.properties中指定:spring.profiles.actvie=dev</li>
<li>在idea编辑器中指定：在运行设置中Active profiles 输入 dev 即可。</li>
</ol>
<h1 id="什么是Spring-Data"><a href="#什么是Spring-Data" class="headerlink" title="什么是Spring Data?"></a>什么是Spring Data?</h1><p>Spring Data是一个用于简化数据库访问，并支持云服务的开源框架。其主要目标是使得对数据的访问变得方便快捷。</p>
<h1 id="Spring-Security和Shiro各自的优缺点？"><a href="#Spring-Security和Shiro各自的优缺点？" class="headerlink" title="Spring Security和Shiro各自的优缺点？"></a>Spring Security和Shiro各自的优缺点？</h1><p>相同点：</p>
<p>  1：认证功能</p>
<p>  2：授权功能</p>
<p>  3：加密功能</p>
<p>  4：会话管理</p>
<p>  5：缓存支持</p>
<p>  6：rememberMe功能…….</p>
<p>不同点：</p>
<p>   优点：</p>
<p>   1：Spring Security基于Spring开发，项目中如果使用Spring作为基础，配合Spring Security做权限更加方便，而Shiro需要和Spring进行整合开发</p>
<p>   2：Spring Security功能比Shiro更加丰富些，例如安全防护</p>
<p>   3：Spring Security社区资源比Shiro丰富</p>
<p>   缺点：</p>
<p>   1：Shiro的配置和使用比较简单，Spring Security上手复杂</p>
<p>   2：Shiro依赖性低，不需要任何框架和容器，可以独立运行，而Spring Security依赖于Spring容器</p>
<h1 id="SpringBoot实现热部署有哪几种方式"><a href="#SpringBoot实现热部署有哪几种方式" class="headerlink" title="SpringBoot实现热部署有哪几种方式?"></a>SpringBoot实现热部署有哪几种方式?</h1><ol>
<li><p>使用spring-boot-devtools组件（快速重新部署），在pom.xml文件中注入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用springloaded插件，在pom.xml文件中注入依赖</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springloaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="SpringBoot中如何解决跨域问题？"><a href="#SpringBoot中如何解决跨域问题？" class="headerlink" title="SpringBoot中如何解决跨域问题？"></a>SpringBoot中如何解决跨域问题？</h1><p>掌握SpringMVC中解决跨域问题的3种方式</p>
<ol>
<li>注解的方式：@CrossOrigin</li>
<li>全局配置的方式：WebMvcConfigurer接口的addCorsMappings方法中注册CORS配置</li>
<li>拦截器的方式：CorsFilter</li>
</ol>
<h1 id="SpringBoot有几种读取配置的方式？"><a href="#SpringBoot有几种读取配置的方式？" class="headerlink" title="SpringBoot有几种读取配置的方式？"></a>SpringBoot有几种读取配置的方式？</h1><p>@value</p>
<p>@ConfigurationProperties</p>
<h1 id="SpringBoot、SpringMVC和Spring有什么区别？"><a href="#SpringBoot、SpringMVC和Spring有什么区别？" class="headerlink" title="SpringBoot、SpringMVC和Spring有什么区别？"></a>SpringBoot、SpringMVC和Spring有什么区别？</h1><p>Spring 是一个“引擎”；</p>
<p>Spring MVC 是基于Spring的一个 MVC 框架 ；</p>
<p>Spring Boot 是基于Spring4的条件注册的一套快速开发整合包。</p>
<h1 id="什么是CSRF攻击？"><a href="#什么是CSRF攻击？" class="headerlink" title="什么是CSRF攻击？"></a>什么是CSRF攻击？</h1><p>跨站请求攻击。简单的说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己以前认证过的站点并运行一些操作。</p>
<h1 id="SpringBoot需要独立的容器运行吗？"><a href="#SpringBoot需要独立的容器运行吗？" class="headerlink" title="SpringBoot需要独立的容器运行吗？"></a>SpringBoot需要独立的容器运行吗？</h1><p>不需要。因为SpringBoot内置了tomcat、Jetty等服务器，可以独立运行。</p>
<h1 id="YAML配置的优势在哪里？"><a href="#YAML配置的优势在哪里？" class="headerlink" title="YAML配置的优势在哪里？"></a>YAML配置的优势在哪里？</h1><p>使用YMAL可以让文件更加结构化，而且不容易混淆。可以看出YAML具有分层配置数据。</p>
<p>使用原则：</p>
<p>1，大小写敏感</p>
<p>2，使用缩进表示层级关系</p>
<p>3，缩进长度没有限制，只要元素对齐就表示这些元素属于同一个层级</p>
<p>4，使用#号来表示注解</p>
<p>5，字符串可以不用引号标注</p>
<h1 id="如何使用SpringBoot实现分页和排序？"><a href="#如何使用SpringBoot实现分页和排序？" class="headerlink" title="如何使用SpringBoot实现分页和排序？"></a>如何使用SpringBoot实现分页和排序？</h1><p>使用 Spring Data-JPA 可以实现将可分页的传递给存储库方法。</p>
<h1 id="SpringBoot的核心注解是哪个？它主要有哪几个注解组成的？"><a href="#SpringBoot的核心注解是哪个？它主要有哪几个注解组成的？" class="headerlink" title="SpringBoot的核心注解是哪个？它主要有哪几个注解组成的？"></a>SpringBoot的核心注解是哪个？它主要有哪几个注解组成的？</h1><p>启动类上面的注解是@SpringBootApplication，它也是 Spring Boot 的核心注解，主要组合包含了以下 3 个注解：</p>
<p>@SpringBootConfiguration：组合了 @Configuration 注解，实现配置文件的功能。</p>
<p>@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项，如关闭数据源自动配置功能： @SpringBootApplication(exclude = { DataSourceAutoConfiguration.class })。</p>
<p>@ComponentScan：Spring组件扫描。</p>
<h1 id="SpringBoot集成mybatis的过程？"><a href="#SpringBoot集成mybatis的过程？" class="headerlink" title="SpringBoot集成mybatis的过程？"></a>SpringBoot集成mybatis的过程？</h1><ol>
<li>在pom.xml文件中注入相关的依赖。</li>
<li>在application.properties/yml中添加数据库配置和mapper扫描配置。</li>
</ol>
<h1 id="RequestMapping和GetMapping的不同之处在哪里？"><a href="#RequestMapping和GetMapping的不同之处在哪里？" class="headerlink" title="RequestMapping和GetMapping的不同之处在哪里？"></a>RequestMapping和GetMapping的不同之处在哪里？</h1><p>区别：<br>@GetMapping是一个组合注解，是@RequestMapping(method = RequestMethod.GET)的缩写。该注解将HTTP Get 映射到 特定的处理方法上。<br>同理@PostMapping也是一个组合注解，是@RequestMapping(method = RequestMethod.POST)的缩写。</p>
<p>注意：@RequestMapping如果没有指定请求方式，将接收Get、Post、Head、Options等所有的请求方式。</p>
<h1 id="SpringBoot中如何实现定时任务？"><a href="#SpringBoot中如何实现定时任务？" class="headerlink" title="SpringBoot中如何实现定时任务？"></a>SpringBoot中如何实现定时任务？</h1><ol>
<li>在启动类上添加 @EnableScheduling 注解，开启定时任务。在定时方法上加上@Scheduled注解。</li>
<li> 在启动类上添加 @EnableScheduling 注解，开启定时任务。注入Quartz 依赖。Quartz 在使用过程中，有两个关键概念，一个是JobDetail（要做的事情），另一个是触发器（什么时候做），要定义 JobDetail，需要先定义 Job，继承 QuartzJobBean 并实现默认的方法。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJob2</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line">    HelloService helloService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">getHelloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloService</span><span class="params">(HelloService helloService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloService = helloService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        helloService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello service &gt;&gt;&gt;&quot;</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Job 有了之后，接下来创建类，配置 JobDetail 和 Trigger 触发器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MethodInvokingJobDetailFactoryBean <span class="title">methodInvokingJobDetailFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MethodInvokingJobDetailFactoryBean bean = <span class="keyword">new</span> MethodInvokingJobDetailFactoryBean();</span><br><span class="line">        bean.setTargetBeanName(<span class="string">&quot;myJob1&quot;</span>);</span><br><span class="line">        bean.setTargetMethod(<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">JobDetailFactoryBean <span class="title">jobDetailFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JobDetailFactoryBean bean = <span class="keyword">new</span> JobDetailFactoryBean();</span><br><span class="line">        bean.setJobClass(MyJob2.class);</span><br><span class="line">        JobDataMap map = <span class="keyword">new</span> JobDataMap();</span><br><span class="line">        map.put(<span class="string">&quot;helloService&quot;</span>, helloService());</span><br><span class="line">        bean.setJobDataMap(map);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SimpleTriggerFactoryBean <span class="title">simpleTriggerFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleTriggerFactoryBean bean = <span class="keyword">new</span> SimpleTriggerFactoryBean();</span><br><span class="line">        bean.setStartTime(<span class="keyword">new</span> Date());</span><br><span class="line">        bean.setRepeatCount(<span class="number">5</span>);</span><br><span class="line">        bean.setJobDetail(methodInvokingJobDetailFactoryBean().getObject());</span><br><span class="line">        bean.setRepeatInterval(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">CronTriggerFactoryBean <span class="title">cronTrigger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CronTriggerFactoryBean bean = <span class="keyword">new</span> CronTriggerFactoryBean();</span><br><span class="line">        bean.setCronExpression(<span class="string">&quot;0/10 * * * * ?&quot;</span>);</span><br><span class="line">        bean.setJobDetail(jobDetailFactoryBean().getObject());</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SchedulerFactoryBean <span class="title">schedulerFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SchedulerFactoryBean bean = <span class="keyword">new</span> SchedulerFactoryBean();</span><br><span class="line">        bean.setTriggers(cronTrigger().getObject(), simpleTriggerFactoryBean().getObject());</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">HelloService <span class="title">helloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于这个配置说如下几点：</p>
<ol>
<li>JobDetail 的配置有两种方式：MethodInvokingJobDetailFactoryBean 和 JobDetailFactoryBean 。</li>
<li>使用 MethodInvokingJobDetailFactoryBean 可以配置目标 Bean 的名字和目标方法的名字，这种方式不支持传参。</li>
<li>使用 JobDetailFactoryBean 可以配置 JobDetail ，任务类继承自 QuartzJobBean ，这种方式支持传参，将参数封装在 JobDataMap 中进行传递。</li>
<li>Trigger 是指触发器，Quartz 中定义了多个触发器，这里向大家展示其中两种的用法，SimpleTrigger 和 CronTrigger 。</li>
<li>SimpleTrigger 有点类似于前面说的 @Scheduled 的基本用法。</li>
<li>CronTrigger 则有点类似于 @Scheduled 中 cron 表达式的用法。</li>
</ol>
<h1 id="SpringBoot的目录结构是怎样的？"><a href="#SpringBoot的目录结构是怎样的？" class="headerlink" title="SpringBoot的目录结构是怎样的？"></a>SpringBoot的目录结构是怎样的？</h1><p>　src/main/java:存放代码</p>
<p>　　src/main/resources</p>
<p>　　　　　　static:存放静态文件，比如：css js image </p>
<p>　　　　　　templates:存放静态页面 jsp ,html,tpl</p>
<p>　　　　　　application.properties文件，全局配置文件</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>VueRouter</title>
    <url>/2022/01/28/VueRouter/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>输入以下命令，安装vue-router插件包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vue-router --save-dev</span><br></pre></td></tr></table></figure>

<p>如果在一个模块化工程中使用它，必须要通过Vue.use()明确地安装路由功能：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>1.定义一个Content.vue的组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;内容&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&quot;content&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>2.新建一个router文件夹存放路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span></span><br><span class="line"><span class="keyword">import</span> Content <span class="keyword">from</span> <span class="string">&#x27;../components/Content&#x27;</span></span><br><span class="line"><span class="comment">//安装路由</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置导出路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">   <span class="attr">routes</span>:[&#123;</span><br><span class="line">       <span class="comment">//路由路径</span></span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/content&#x27;</span>,</span><br><span class="line">       <span class="comment">//路由名称</span></span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">        <span class="comment">//跳转组件</span></span><br><span class="line">        <span class="attr">component</span>:Content</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>3.在main.js中配置路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span> <span class="comment">//自动扫描里面的路由配置</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span><span class="comment">//来关闭生产模式下给出的提示</span></span><br><span class="line"><span class="comment">//显示声明使用VueRouter</span></span><br><span class="line">Vue.use(router);</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,<span class="comment">//配置路由</span></span><br><span class="line">  <span class="attr">components</span>: &#123; App &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>4.在App.vue中使用路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;router-link to=&quot;/content&quot;&gt;内容&lt;/router-link&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
